//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Expressions.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IExpressionsListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.Diagnostics.DebuggerNonUserCode]
[System.CLSCompliant(false)]
public partial class ExpressionsBaseListener : IExpressionsListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.check"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterCheck([NotNull] ExpressionsParser.CheckContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.check"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitCheck([NotNull] ExpressionsParser.CheckContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.rule_body"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRule_body([NotNull] ExpressionsParser.Rule_bodyContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.rule_body"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRule_body([NotNull] ExpressionsParser.Rule_bodyContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.rule_body_element"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRule_body_element([NotNull] ExpressionsParser.Rule_body_elementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.rule_body_element"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRule_body_element([NotNull] ExpressionsParser.Rule_body_elementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>expressionAdd</c>
	/// labeled alternative in <see cref="ExpressionsParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpressionAdd([NotNull] ExpressionsParser.ExpressionAddContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>expressionAdd</c>
	/// labeled alternative in <see cref="ExpressionsParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpressionAdd([NotNull] ExpressionsParser.ExpressionAddContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>expressionLogic</c>
	/// labeled alternative in <see cref="ExpressionsParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpressionLogic([NotNull] ExpressionsParser.ExpressionLogicContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>expressionLogic</c>
	/// labeled alternative in <see cref="ExpressionsParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpressionLogic([NotNull] ExpressionsParser.ExpressionLogicContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>expressionUnary</c>
	/// labeled alternative in <see cref="ExpressionsParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpressionUnary([NotNull] ExpressionsParser.ExpressionUnaryContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>expressionUnary</c>
	/// labeled alternative in <see cref="ExpressionsParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpressionUnary([NotNull] ExpressionsParser.ExpressionUnaryContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>expressionParentheses</c>
	/// labeled alternative in <see cref="ExpressionsParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpressionParentheses([NotNull] ExpressionsParser.ExpressionParenthesesContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>expressionParentheses</c>
	/// labeled alternative in <see cref="ExpressionsParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpressionParentheses([NotNull] ExpressionsParser.ExpressionParenthesesContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>expressionComp</c>
	/// labeled alternative in <see cref="ExpressionsParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpressionComp([NotNull] ExpressionsParser.ExpressionCompContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>expressionComp</c>
	/// labeled alternative in <see cref="ExpressionsParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpressionComp([NotNull] ExpressionsParser.ExpressionCompContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>expressionMethod</c>
	/// labeled alternative in <see cref="ExpressionsParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpressionMethod([NotNull] ExpressionsParser.ExpressionMethodContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>expressionMethod</c>
	/// labeled alternative in <see cref="ExpressionsParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpressionMethod([NotNull] ExpressionsParser.ExpressionMethodContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>expressionTerm</c>
	/// labeled alternative in <see cref="ExpressionsParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpressionTerm([NotNull] ExpressionsParser.ExpressionTermContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>expressionTerm</c>
	/// labeled alternative in <see cref="ExpressionsParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpressionTerm([NotNull] ExpressionsParser.ExpressionTermContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>expressionMult</c>
	/// labeled alternative in <see cref="ExpressionsParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpressionMult([NotNull] ExpressionsParser.ExpressionMultContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>expressionMult</c>
	/// labeled alternative in <see cref="ExpressionsParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpressionMult([NotNull] ExpressionsParser.ExpressionMultContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>expressionVariable</c>
	/// labeled alternative in <see cref="ExpressionsParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterExpressionVariable([NotNull] ExpressionsParser.ExpressionVariableContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>expressionVariable</c>
	/// labeled alternative in <see cref="ExpressionsParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitExpressionVariable([NotNull] ExpressionsParser.ExpressionVariableContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterTerm([NotNull] ExpressionsParser.TermContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitTerm([NotNull] ExpressionsParser.TermContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>booleanFactTerm</c>
	/// labeled alternative in <see cref="ExpressionsParser.fact_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBooleanFactTerm([NotNull] ExpressionsParser.BooleanFactTermContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>booleanFactTerm</c>
	/// labeled alternative in <see cref="ExpressionsParser.fact_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBooleanFactTerm([NotNull] ExpressionsParser.BooleanFactTermContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>stringFactTerm</c>
	/// labeled alternative in <see cref="ExpressionsParser.fact_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStringFactTerm([NotNull] ExpressionsParser.StringFactTermContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>stringFactTerm</c>
	/// labeled alternative in <see cref="ExpressionsParser.fact_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStringFactTerm([NotNull] ExpressionsParser.StringFactTermContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>numberFactTerm</c>
	/// labeled alternative in <see cref="ExpressionsParser.fact_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNumberFactTerm([NotNull] ExpressionsParser.NumberFactTermContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>numberFactTerm</c>
	/// labeled alternative in <see cref="ExpressionsParser.fact_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNumberFactTerm([NotNull] ExpressionsParser.NumberFactTermContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>bytesFactTerm</c>
	/// labeled alternative in <see cref="ExpressionsParser.fact_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBytesFactTerm([NotNull] ExpressionsParser.BytesFactTermContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>bytesFactTerm</c>
	/// labeled alternative in <see cref="ExpressionsParser.fact_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBytesFactTerm([NotNull] ExpressionsParser.BytesFactTermContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>dateFactTerm</c>
	/// labeled alternative in <see cref="ExpressionsParser.fact_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDateFactTerm([NotNull] ExpressionsParser.DateFactTermContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>dateFactTerm</c>
	/// labeled alternative in <see cref="ExpressionsParser.fact_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDateFactTerm([NotNull] ExpressionsParser.DateFactTermContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>setFactTerm</c>
	/// labeled alternative in <see cref="ExpressionsParser.fact_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSetFactTerm([NotNull] ExpressionsParser.SetFactTermContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>setFactTerm</c>
	/// labeled alternative in <see cref="ExpressionsParser.fact_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSetFactTerm([NotNull] ExpressionsParser.SetFactTermContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>booleanSetTerm</c>
	/// labeled alternative in <see cref="ExpressionsParser.set_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBooleanSetTerm([NotNull] ExpressionsParser.BooleanSetTermContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>booleanSetTerm</c>
	/// labeled alternative in <see cref="ExpressionsParser.set_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBooleanSetTerm([NotNull] ExpressionsParser.BooleanSetTermContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>stringSetTerm</c>
	/// labeled alternative in <see cref="ExpressionsParser.set_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStringSetTerm([NotNull] ExpressionsParser.StringSetTermContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>stringSetTerm</c>
	/// labeled alternative in <see cref="ExpressionsParser.set_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStringSetTerm([NotNull] ExpressionsParser.StringSetTermContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>numberSetTerm</c>
	/// labeled alternative in <see cref="ExpressionsParser.set_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNumberSetTerm([NotNull] ExpressionsParser.NumberSetTermContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>numberSetTerm</c>
	/// labeled alternative in <see cref="ExpressionsParser.set_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNumberSetTerm([NotNull] ExpressionsParser.NumberSetTermContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>bytesSetTerm</c>
	/// labeled alternative in <see cref="ExpressionsParser.set_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterBytesSetTerm([NotNull] ExpressionsParser.BytesSetTermContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>bytesSetTerm</c>
	/// labeled alternative in <see cref="ExpressionsParser.set_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitBytesSetTerm([NotNull] ExpressionsParser.BytesSetTermContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>dateSetTerm</c>
	/// labeled alternative in <see cref="ExpressionsParser.set_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDateSetTerm([NotNull] ExpressionsParser.DateSetTermContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>dateSetTerm</c>
	/// labeled alternative in <see cref="ExpressionsParser.set_term"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDateSetTerm([NotNull] ExpressionsParser.DateSetTermContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.set"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSet([NotNull] ExpressionsParser.SetContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.set"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSet([NotNull] ExpressionsParser.SetContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
