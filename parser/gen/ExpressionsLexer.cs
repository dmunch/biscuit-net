//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Expressions.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class ExpressionsLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, VARIABLE=21, STRING=22, NUMBER=23, BYTES=24, 
		BOOLEAN=25, DATE=26, METHOD_INVOCATION=27, NAME=28, WS=29;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"T__17", "T__18", "T__19", "VARIABLE", "STRING", "NUMBER", "BYTES", "BOOLEAN", 
		"DATE", "METHOD_INVOCATION", "NAME", "WS"
	};


	public ExpressionsLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public ExpressionsLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'check'", "'if'", "'or'", "','", "'('", "')'", "'!'", "'*'", "'/'", 
		"'+'", "'-'", "'||'", "'&&'", "'>='", "'<='", "'>'", "'<'", "'=='", "'['", 
		"']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, "VARIABLE", "STRING", 
		"NUMBER", "BYTES", "BOOLEAN", "DATE", "METHOD_INVOCATION", "NAME", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Expressions.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ExpressionsLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,29,209,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,4,1,4,1,
		5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,11,1,12,1,
		12,1,12,1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,
		17,1,18,1,18,1,19,1,19,1,20,1,20,4,20,113,8,20,11,20,12,20,114,1,21,1,
		21,1,21,1,21,5,21,121,8,21,10,21,12,21,124,9,21,1,21,1,21,1,22,3,22,129,
		8,22,1,22,4,22,132,8,22,11,22,12,22,133,1,23,1,23,1,23,1,23,1,23,1,23,
		4,23,142,8,23,11,23,12,23,143,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,
		1,24,3,24,155,8,24,1,25,5,25,158,8,25,10,25,12,25,161,9,25,1,25,1,25,1,
		25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,
		25,1,25,1,25,1,25,1,25,1,25,3,25,185,8,25,1,26,1,26,3,26,189,8,26,1,26,
		5,26,192,8,26,10,26,12,26,195,9,26,1,27,1,27,4,27,199,8,27,11,27,12,27,
		200,1,28,4,28,204,8,28,11,28,12,28,205,1,28,1,28,1,122,0,29,1,1,3,2,5,
		3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,
		33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,
		57,29,1,0,7,4,0,48,58,65,90,95,95,97,122,1,0,48,57,2,0,48,57,97,122,2,
		0,43,43,45,45,2,0,65,90,97,122,4,0,48,57,65,90,95,95,97,122,3,0,9,10,13,
		13,32,32,220,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,
		0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,
		1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,
		0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,
		1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,
		0,0,55,1,0,0,0,0,57,1,0,0,0,1,59,1,0,0,0,3,65,1,0,0,0,5,68,1,0,0,0,7,71,
		1,0,0,0,9,73,1,0,0,0,11,75,1,0,0,0,13,77,1,0,0,0,15,79,1,0,0,0,17,81,1,
		0,0,0,19,83,1,0,0,0,21,85,1,0,0,0,23,87,1,0,0,0,25,90,1,0,0,0,27,93,1,
		0,0,0,29,96,1,0,0,0,31,99,1,0,0,0,33,101,1,0,0,0,35,103,1,0,0,0,37,106,
		1,0,0,0,39,108,1,0,0,0,41,110,1,0,0,0,43,116,1,0,0,0,45,128,1,0,0,0,47,
		135,1,0,0,0,49,154,1,0,0,0,51,159,1,0,0,0,53,186,1,0,0,0,55,196,1,0,0,
		0,57,203,1,0,0,0,59,60,5,99,0,0,60,61,5,104,0,0,61,62,5,101,0,0,62,63,
		5,99,0,0,63,64,5,107,0,0,64,2,1,0,0,0,65,66,5,105,0,0,66,67,5,102,0,0,
		67,4,1,0,0,0,68,69,5,111,0,0,69,70,5,114,0,0,70,6,1,0,0,0,71,72,5,44,0,
		0,72,8,1,0,0,0,73,74,5,40,0,0,74,10,1,0,0,0,75,76,5,41,0,0,76,12,1,0,0,
		0,77,78,5,33,0,0,78,14,1,0,0,0,79,80,5,42,0,0,80,16,1,0,0,0,81,82,5,47,
		0,0,82,18,1,0,0,0,83,84,5,43,0,0,84,20,1,0,0,0,85,86,5,45,0,0,86,22,1,
		0,0,0,87,88,5,124,0,0,88,89,5,124,0,0,89,24,1,0,0,0,90,91,5,38,0,0,91,
		92,5,38,0,0,92,26,1,0,0,0,93,94,5,62,0,0,94,95,5,61,0,0,95,28,1,0,0,0,
		96,97,5,60,0,0,97,98,5,61,0,0,98,30,1,0,0,0,99,100,5,62,0,0,100,32,1,0,
		0,0,101,102,5,60,0,0,102,34,1,0,0,0,103,104,5,61,0,0,104,105,5,61,0,0,
		105,36,1,0,0,0,106,107,5,91,0,0,107,38,1,0,0,0,108,109,5,93,0,0,109,40,
		1,0,0,0,110,112,5,36,0,0,111,113,7,0,0,0,112,111,1,0,0,0,113,114,1,0,0,
		0,114,112,1,0,0,0,114,115,1,0,0,0,115,42,1,0,0,0,116,122,5,34,0,0,117,
		118,5,92,0,0,118,121,5,34,0,0,119,121,9,0,0,0,120,117,1,0,0,0,120,119,
		1,0,0,0,121,124,1,0,0,0,122,123,1,0,0,0,122,120,1,0,0,0,123,125,1,0,0,
		0,124,122,1,0,0,0,125,126,5,34,0,0,126,44,1,0,0,0,127,129,5,45,0,0,128,
		127,1,0,0,0,128,129,1,0,0,0,129,131,1,0,0,0,130,132,7,1,0,0,131,130,1,
		0,0,0,132,133,1,0,0,0,133,131,1,0,0,0,133,134,1,0,0,0,134,46,1,0,0,0,135,
		136,5,104,0,0,136,137,5,101,0,0,137,138,5,120,0,0,138,139,5,58,0,0,139,
		141,1,0,0,0,140,142,7,2,0,0,141,140,1,0,0,0,142,143,1,0,0,0,143,141,1,
		0,0,0,143,144,1,0,0,0,144,48,1,0,0,0,145,146,5,116,0,0,146,147,5,114,0,
		0,147,148,5,117,0,0,148,155,5,101,0,0,149,150,5,102,0,0,150,151,5,97,0,
		0,151,152,5,108,0,0,152,153,5,115,0,0,153,155,5,101,0,0,154,145,1,0,0,
		0,154,149,1,0,0,0,155,50,1,0,0,0,156,158,7,1,0,0,157,156,1,0,0,0,158,161,
		1,0,0,0,159,157,1,0,0,0,159,160,1,0,0,0,160,162,1,0,0,0,161,159,1,0,0,
		0,162,163,5,45,0,0,163,164,7,1,0,0,164,165,7,1,0,0,165,166,5,45,0,0,166,
		167,7,1,0,0,167,168,7,1,0,0,168,169,5,84,0,0,169,170,7,1,0,0,170,171,7,
		1,0,0,171,172,5,58,0,0,172,173,7,1,0,0,173,174,7,1,0,0,174,175,5,58,0,
		0,175,176,7,1,0,0,176,184,7,1,0,0,177,185,5,90,0,0,178,179,7,3,0,0,179,
		180,7,1,0,0,180,181,7,1,0,0,181,182,5,58,0,0,182,183,7,1,0,0,183,185,7,
		1,0,0,184,177,1,0,0,0,184,178,1,0,0,0,185,52,1,0,0,0,186,188,5,46,0,0,
		187,189,7,4,0,0,188,187,1,0,0,0,189,193,1,0,0,0,190,192,7,5,0,0,191,190,
		1,0,0,0,192,195,1,0,0,0,193,191,1,0,0,0,193,194,1,0,0,0,194,54,1,0,0,0,
		195,193,1,0,0,0,196,198,7,4,0,0,197,199,7,0,0,0,198,197,1,0,0,0,199,200,
		1,0,0,0,200,198,1,0,0,0,200,201,1,0,0,0,201,56,1,0,0,0,202,204,7,6,0,0,
		203,202,1,0,0,0,204,205,1,0,0,0,205,203,1,0,0,0,205,206,1,0,0,0,206,207,
		1,0,0,0,207,208,6,28,0,0,208,58,1,0,0,0,16,0,114,120,122,128,133,141,143,
		154,159,184,188,191,193,200,205,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
