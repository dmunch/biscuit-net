//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Expressions.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class ExpressionsLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, WS=6, VARIABLE=7, TERM=8, FACT_TERM=9, 
		SET_TERM=10, STRING=11, NUMBER=12, BYTES=13, BOOLEAN=14, DATE=15, SET=16, 
		METHOD_NAME=17, OPERATOR=18;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "WS", "VARIABLE", "TERM", "FACT_TERM", 
		"SET_TERM", "STRING", "NUMBER", "BYTES", "BOOLEAN", "DATE", "SET", "METHOD_NAME", 
		"OPERATOR"
	};


	public ExpressionsLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public ExpressionsLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'!'", "'.'", "'('", "','", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, "WS", "VARIABLE", "TERM", "FACT_TERM", 
		"SET_TERM", "STRING", "NUMBER", "BYTES", "BOOLEAN", "DATE", "SET", "METHOD_NAME", 
		"OPERATOR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Expressions.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ExpressionsLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,18,197,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,
		1,4,1,5,4,5,49,8,5,11,5,12,5,50,1,5,1,5,1,6,1,6,4,6,57,8,6,11,6,12,6,58,
		1,7,1,7,3,7,63,8,7,1,8,1,8,1,8,1,8,1,8,1,8,3,8,71,8,8,1,9,1,9,1,9,1,9,
		1,9,3,9,78,8,9,1,10,1,10,1,10,1,10,5,10,84,8,10,10,10,12,10,87,9,10,1,
		10,1,10,1,11,3,11,92,8,11,1,11,4,11,95,8,11,11,11,12,11,96,1,12,1,12,1,
		12,1,12,1,12,1,12,4,12,105,8,12,11,12,12,12,106,1,13,1,13,1,13,1,13,1,
		13,1,13,1,13,1,13,1,13,3,13,118,8,13,1,14,5,14,121,8,14,10,14,12,14,124,
		9,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
		1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,3,14,148,8,14,1,15,1,15,3,
		15,152,8,15,1,15,1,15,3,15,156,8,15,1,15,1,15,3,15,160,8,15,1,15,5,15,
		163,8,15,10,15,12,15,166,9,15,1,15,3,15,169,8,15,3,15,171,8,15,1,15,1,
		15,1,16,3,16,176,8,16,1,16,5,16,179,8,16,10,16,12,16,182,9,16,1,17,1,17,
		1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,196,8,17,1,85,0,
		18,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,
		14,29,15,31,16,33,17,35,18,1,0,9,3,0,9,10,13,13,32,32,4,0,48,58,65,90,
		95,95,97,122,1,0,48,57,2,0,48,57,97,122,2,0,43,43,45,45,2,0,65,90,97,122,
		4,0,48,57,65,90,95,95,97,122,2,0,60,60,62,62,3,0,42,43,45,45,47,47,229,
		0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,
		0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
		1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,
		0,0,35,1,0,0,0,1,37,1,0,0,0,3,39,1,0,0,0,5,41,1,0,0,0,7,43,1,0,0,0,9,45,
		1,0,0,0,11,48,1,0,0,0,13,54,1,0,0,0,15,62,1,0,0,0,17,70,1,0,0,0,19,77,
		1,0,0,0,21,79,1,0,0,0,23,91,1,0,0,0,25,98,1,0,0,0,27,117,1,0,0,0,29,122,
		1,0,0,0,31,149,1,0,0,0,33,175,1,0,0,0,35,195,1,0,0,0,37,38,5,33,0,0,38,
		2,1,0,0,0,39,40,5,46,0,0,40,4,1,0,0,0,41,42,5,40,0,0,42,6,1,0,0,0,43,44,
		5,44,0,0,44,8,1,0,0,0,45,46,5,41,0,0,46,10,1,0,0,0,47,49,7,0,0,0,48,47,
		1,0,0,0,49,50,1,0,0,0,50,48,1,0,0,0,50,51,1,0,0,0,51,52,1,0,0,0,52,53,
		6,5,0,0,53,12,1,0,0,0,54,56,5,36,0,0,55,57,7,1,0,0,56,55,1,0,0,0,57,58,
		1,0,0,0,58,56,1,0,0,0,58,59,1,0,0,0,59,14,1,0,0,0,60,63,3,17,8,0,61,63,
		3,13,6,0,62,60,1,0,0,0,62,61,1,0,0,0,63,16,1,0,0,0,64,71,3,27,13,0,65,
		71,3,21,10,0,66,71,3,23,11,0,67,71,3,25,12,0,68,71,3,29,14,0,69,71,3,31,
		15,0,70,64,1,0,0,0,70,65,1,0,0,0,70,66,1,0,0,0,70,67,1,0,0,0,70,68,1,0,
		0,0,70,69,1,0,0,0,71,18,1,0,0,0,72,78,3,27,13,0,73,78,3,21,10,0,74,78,
		3,23,11,0,75,78,3,25,12,0,76,78,3,29,14,0,77,72,1,0,0,0,77,73,1,0,0,0,
		77,74,1,0,0,0,77,75,1,0,0,0,77,76,1,0,0,0,78,20,1,0,0,0,79,85,5,34,0,0,
		80,81,5,92,0,0,81,84,5,34,0,0,82,84,9,0,0,0,83,80,1,0,0,0,83,82,1,0,0,
		0,84,87,1,0,0,0,85,86,1,0,0,0,85,83,1,0,0,0,86,88,1,0,0,0,87,85,1,0,0,
		0,88,89,5,34,0,0,89,22,1,0,0,0,90,92,5,45,0,0,91,90,1,0,0,0,91,92,1,0,
		0,0,92,94,1,0,0,0,93,95,7,2,0,0,94,93,1,0,0,0,95,96,1,0,0,0,96,94,1,0,
		0,0,96,97,1,0,0,0,97,24,1,0,0,0,98,99,5,104,0,0,99,100,5,101,0,0,100,101,
		5,120,0,0,101,102,5,58,0,0,102,104,1,0,0,0,103,105,7,3,0,0,104,103,1,0,
		0,0,105,106,1,0,0,0,106,104,1,0,0,0,106,107,1,0,0,0,107,26,1,0,0,0,108,
		109,5,116,0,0,109,110,5,114,0,0,110,111,5,117,0,0,111,118,5,101,0,0,112,
		113,5,102,0,0,113,114,5,97,0,0,114,115,5,108,0,0,115,116,5,115,0,0,116,
		118,5,101,0,0,117,108,1,0,0,0,117,112,1,0,0,0,118,28,1,0,0,0,119,121,7,
		2,0,0,120,119,1,0,0,0,121,124,1,0,0,0,122,120,1,0,0,0,122,123,1,0,0,0,
		123,125,1,0,0,0,124,122,1,0,0,0,125,126,5,45,0,0,126,127,7,2,0,0,127,128,
		7,2,0,0,128,129,5,45,0,0,129,130,7,2,0,0,130,131,7,2,0,0,131,132,5,84,
		0,0,132,133,7,2,0,0,133,134,7,2,0,0,134,135,5,58,0,0,135,136,7,2,0,0,136,
		137,7,2,0,0,137,138,5,58,0,0,138,139,7,2,0,0,139,147,7,2,0,0,140,148,5,
		90,0,0,141,142,7,4,0,0,142,143,7,2,0,0,143,144,7,2,0,0,144,145,5,58,0,
		0,145,146,7,2,0,0,146,148,7,2,0,0,147,140,1,0,0,0,147,141,1,0,0,0,148,
		30,1,0,0,0,149,151,5,91,0,0,150,152,3,11,5,0,151,150,1,0,0,0,151,152,1,
		0,0,0,152,170,1,0,0,0,153,164,3,17,8,0,154,156,3,11,5,0,155,154,1,0,0,
		0,155,156,1,0,0,0,156,157,1,0,0,0,157,159,5,44,0,0,158,160,3,11,5,0,159,
		158,1,0,0,0,159,160,1,0,0,0,160,161,1,0,0,0,161,163,3,19,9,0,162,155,1,
		0,0,0,163,166,1,0,0,0,164,162,1,0,0,0,164,165,1,0,0,0,165,168,1,0,0,0,
		166,164,1,0,0,0,167,169,3,11,5,0,168,167,1,0,0,0,168,169,1,0,0,0,169,171,
		1,0,0,0,170,153,1,0,0,0,170,171,1,0,0,0,171,172,1,0,0,0,172,173,5,93,0,
		0,173,32,1,0,0,0,174,176,7,5,0,0,175,174,1,0,0,0,176,180,1,0,0,0,177,179,
		7,6,0,0,178,177,1,0,0,0,179,182,1,0,0,0,180,178,1,0,0,0,180,181,1,0,0,
		0,181,34,1,0,0,0,182,180,1,0,0,0,183,196,7,7,0,0,184,185,5,60,0,0,185,
		196,5,61,0,0,186,187,5,62,0,0,187,196,5,61,0,0,188,189,5,61,0,0,189,196,
		5,61,0,0,190,191,5,38,0,0,191,196,5,38,0,0,192,193,5,124,0,0,193,196,5,
		124,0,0,194,196,7,8,0,0,195,183,1,0,0,0,195,184,1,0,0,0,195,186,1,0,0,
		0,195,188,1,0,0,0,195,190,1,0,0,0,195,192,1,0,0,0,195,194,1,0,0,0,196,
		36,1,0,0,0,25,0,50,58,62,70,77,83,85,91,96,104,106,117,122,147,151,155,
		159,164,168,170,175,178,180,195,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
