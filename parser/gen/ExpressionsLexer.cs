//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Expressions.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class ExpressionsLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, VARIABLE=11, STRING=12, NUMBER=13, BYTES=14, BOOLEAN=15, DATE=16, 
		METHOD_NAME=17, OPERATOR=18, WS=19;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "VARIABLE", "STRING", "NUMBER", "BYTES", "BOOLEAN", "DATE", "METHOD_NAME", 
		"OPERATOR", "WS"
	};


	public ExpressionsLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public ExpressionsLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'check'", "'if'", "'or'", "','", "'!'", "'('", "')'", "'.'", "'['", 
		"']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, "VARIABLE", 
		"STRING", "NUMBER", "BYTES", "BOOLEAN", "DATE", "METHOD_NAME", "OPERATOR", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Expressions.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ExpressionsLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,19,171,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,1,0,1,0,1,0,1,0,1,0,1,0,1,
		1,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,
		1,9,1,9,1,10,1,10,4,10,68,8,10,11,10,12,10,69,1,11,1,11,1,11,1,11,5,11,
		76,8,11,10,11,12,11,79,9,11,1,11,1,11,1,12,3,12,84,8,12,1,12,4,12,87,8,
		12,11,12,12,12,88,1,13,1,13,1,13,1,13,1,13,1,13,4,13,97,8,13,11,13,12,
		13,98,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,3,14,110,8,14,1,15,
		5,15,113,8,15,10,15,12,15,116,9,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,
		1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,
		1,15,3,15,140,8,15,1,16,3,16,143,8,16,1,16,5,16,146,8,16,10,16,12,16,149,
		9,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,
		163,8,17,1,18,4,18,166,8,18,11,18,12,18,167,1,18,1,18,1,77,0,19,1,1,3,
		2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,
		31,16,33,17,35,18,37,19,1,0,9,4,0,48,58,65,90,95,95,97,122,1,0,48,57,2,
		0,48,57,97,122,2,0,43,43,45,45,2,0,65,90,97,122,4,0,48,57,65,90,95,95,
		97,122,2,0,60,60,62,62,3,0,42,43,45,45,47,47,3,0,9,10,13,13,32,32,187,
		0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,
		0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
		1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,
		0,0,35,1,0,0,0,0,37,1,0,0,0,1,39,1,0,0,0,3,45,1,0,0,0,5,48,1,0,0,0,7,51,
		1,0,0,0,9,53,1,0,0,0,11,55,1,0,0,0,13,57,1,0,0,0,15,59,1,0,0,0,17,61,1,
		0,0,0,19,63,1,0,0,0,21,65,1,0,0,0,23,71,1,0,0,0,25,83,1,0,0,0,27,90,1,
		0,0,0,29,109,1,0,0,0,31,114,1,0,0,0,33,142,1,0,0,0,35,162,1,0,0,0,37,165,
		1,0,0,0,39,40,5,99,0,0,40,41,5,104,0,0,41,42,5,101,0,0,42,43,5,99,0,0,
		43,44,5,107,0,0,44,2,1,0,0,0,45,46,5,105,0,0,46,47,5,102,0,0,47,4,1,0,
		0,0,48,49,5,111,0,0,49,50,5,114,0,0,50,6,1,0,0,0,51,52,5,44,0,0,52,8,1,
		0,0,0,53,54,5,33,0,0,54,10,1,0,0,0,55,56,5,40,0,0,56,12,1,0,0,0,57,58,
		5,41,0,0,58,14,1,0,0,0,59,60,5,46,0,0,60,16,1,0,0,0,61,62,5,91,0,0,62,
		18,1,0,0,0,63,64,5,93,0,0,64,20,1,0,0,0,65,67,5,36,0,0,66,68,7,0,0,0,67,
		66,1,0,0,0,68,69,1,0,0,0,69,67,1,0,0,0,69,70,1,0,0,0,70,22,1,0,0,0,71,
		77,5,34,0,0,72,73,5,92,0,0,73,76,5,34,0,0,74,76,9,0,0,0,75,72,1,0,0,0,
		75,74,1,0,0,0,76,79,1,0,0,0,77,78,1,0,0,0,77,75,1,0,0,0,78,80,1,0,0,0,
		79,77,1,0,0,0,80,81,5,34,0,0,81,24,1,0,0,0,82,84,5,45,0,0,83,82,1,0,0,
		0,83,84,1,0,0,0,84,86,1,0,0,0,85,87,7,1,0,0,86,85,1,0,0,0,87,88,1,0,0,
		0,88,86,1,0,0,0,88,89,1,0,0,0,89,26,1,0,0,0,90,91,5,104,0,0,91,92,5,101,
		0,0,92,93,5,120,0,0,93,94,5,58,0,0,94,96,1,0,0,0,95,97,7,2,0,0,96,95,1,
		0,0,0,97,98,1,0,0,0,98,96,1,0,0,0,98,99,1,0,0,0,99,28,1,0,0,0,100,101,
		5,116,0,0,101,102,5,114,0,0,102,103,5,117,0,0,103,110,5,101,0,0,104,105,
		5,102,0,0,105,106,5,97,0,0,106,107,5,108,0,0,107,108,5,115,0,0,108,110,
		5,101,0,0,109,100,1,0,0,0,109,104,1,0,0,0,110,30,1,0,0,0,111,113,7,1,0,
		0,112,111,1,0,0,0,113,116,1,0,0,0,114,112,1,0,0,0,114,115,1,0,0,0,115,
		117,1,0,0,0,116,114,1,0,0,0,117,118,5,45,0,0,118,119,7,1,0,0,119,120,7,
		1,0,0,120,121,5,45,0,0,121,122,7,1,0,0,122,123,7,1,0,0,123,124,5,84,0,
		0,124,125,7,1,0,0,125,126,7,1,0,0,126,127,5,58,0,0,127,128,7,1,0,0,128,
		129,7,1,0,0,129,130,5,58,0,0,130,131,7,1,0,0,131,139,7,1,0,0,132,140,5,
		90,0,0,133,134,7,3,0,0,134,135,7,1,0,0,135,136,7,1,0,0,136,137,5,58,0,
		0,137,138,7,1,0,0,138,140,7,1,0,0,139,132,1,0,0,0,139,133,1,0,0,0,140,
		32,1,0,0,0,141,143,7,4,0,0,142,141,1,0,0,0,143,147,1,0,0,0,144,146,7,5,
		0,0,145,144,1,0,0,0,146,149,1,0,0,0,147,145,1,0,0,0,147,148,1,0,0,0,148,
		34,1,0,0,0,149,147,1,0,0,0,150,163,7,6,0,0,151,152,5,60,0,0,152,163,5,
		61,0,0,153,154,5,62,0,0,154,163,5,61,0,0,155,156,5,61,0,0,156,163,5,61,
		0,0,157,158,5,38,0,0,158,163,5,38,0,0,159,160,5,124,0,0,160,163,5,124,
		0,0,161,163,7,7,0,0,162,150,1,0,0,0,162,151,1,0,0,0,162,153,1,0,0,0,162,
		155,1,0,0,0,162,157,1,0,0,0,162,159,1,0,0,0,162,161,1,0,0,0,163,36,1,0,
		0,0,164,166,7,8,0,0,165,164,1,0,0,0,166,167,1,0,0,0,167,165,1,0,0,0,167,
		168,1,0,0,0,168,169,1,0,0,0,169,170,6,18,0,0,170,38,1,0,0,0,16,0,69,75,
		77,83,88,96,98,109,114,139,142,145,147,162,167,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
