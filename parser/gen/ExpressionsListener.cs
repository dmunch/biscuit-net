//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Expressions.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="ExpressionsParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public interface IExpressionsListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.check"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCheck([NotNull] ExpressionsParser.CheckContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.check"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCheck([NotNull] ExpressionsParser.CheckContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.rule_body"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRule_body([NotNull] ExpressionsParser.Rule_bodyContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.rule_body"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRule_body([NotNull] ExpressionsParser.Rule_bodyContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.rule_body_element"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRule_body_element([NotNull] ExpressionsParser.Rule_body_elementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.rule_body_element"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRule_body_element([NotNull] ExpressionsParser.Rule_body_elementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>expressionAdd</c>
	/// labeled alternative in <see cref="ExpressionsParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpressionAdd([NotNull] ExpressionsParser.ExpressionAddContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>expressionAdd</c>
	/// labeled alternative in <see cref="ExpressionsParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpressionAdd([NotNull] ExpressionsParser.ExpressionAddContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>expressionLogic</c>
	/// labeled alternative in <see cref="ExpressionsParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpressionLogic([NotNull] ExpressionsParser.ExpressionLogicContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>expressionLogic</c>
	/// labeled alternative in <see cref="ExpressionsParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpressionLogic([NotNull] ExpressionsParser.ExpressionLogicContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>expressionUnary</c>
	/// labeled alternative in <see cref="ExpressionsParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpressionUnary([NotNull] ExpressionsParser.ExpressionUnaryContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>expressionUnary</c>
	/// labeled alternative in <see cref="ExpressionsParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpressionUnary([NotNull] ExpressionsParser.ExpressionUnaryContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>expressionParentheses</c>
	/// labeled alternative in <see cref="ExpressionsParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpressionParentheses([NotNull] ExpressionsParser.ExpressionParenthesesContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>expressionParentheses</c>
	/// labeled alternative in <see cref="ExpressionsParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpressionParentheses([NotNull] ExpressionsParser.ExpressionParenthesesContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>expressionComp</c>
	/// labeled alternative in <see cref="ExpressionsParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpressionComp([NotNull] ExpressionsParser.ExpressionCompContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>expressionComp</c>
	/// labeled alternative in <see cref="ExpressionsParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpressionComp([NotNull] ExpressionsParser.ExpressionCompContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>expressionMethod</c>
	/// labeled alternative in <see cref="ExpressionsParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpressionMethod([NotNull] ExpressionsParser.ExpressionMethodContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>expressionMethod</c>
	/// labeled alternative in <see cref="ExpressionsParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpressionMethod([NotNull] ExpressionsParser.ExpressionMethodContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>expressionTerm</c>
	/// labeled alternative in <see cref="ExpressionsParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpressionTerm([NotNull] ExpressionsParser.ExpressionTermContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>expressionTerm</c>
	/// labeled alternative in <see cref="ExpressionsParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpressionTerm([NotNull] ExpressionsParser.ExpressionTermContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>expressionMult</c>
	/// labeled alternative in <see cref="ExpressionsParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpressionMult([NotNull] ExpressionsParser.ExpressionMultContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>expressionMult</c>
	/// labeled alternative in <see cref="ExpressionsParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpressionMult([NotNull] ExpressionsParser.ExpressionMultContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>expressionVariable</c>
	/// labeled alternative in <see cref="ExpressionsParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpressionVariable([NotNull] ExpressionsParser.ExpressionVariableContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>expressionVariable</c>
	/// labeled alternative in <see cref="ExpressionsParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpressionVariable([NotNull] ExpressionsParser.ExpressionVariableContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTerm([NotNull] ExpressionsParser.TermContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTerm([NotNull] ExpressionsParser.TermContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>booleanFactTerm</c>
	/// labeled alternative in <see cref="ExpressionsParser.fact_term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBooleanFactTerm([NotNull] ExpressionsParser.BooleanFactTermContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>booleanFactTerm</c>
	/// labeled alternative in <see cref="ExpressionsParser.fact_term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBooleanFactTerm([NotNull] ExpressionsParser.BooleanFactTermContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>stringFactTerm</c>
	/// labeled alternative in <see cref="ExpressionsParser.fact_term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStringFactTerm([NotNull] ExpressionsParser.StringFactTermContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>stringFactTerm</c>
	/// labeled alternative in <see cref="ExpressionsParser.fact_term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStringFactTerm([NotNull] ExpressionsParser.StringFactTermContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>numberFactTerm</c>
	/// labeled alternative in <see cref="ExpressionsParser.fact_term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNumberFactTerm([NotNull] ExpressionsParser.NumberFactTermContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>numberFactTerm</c>
	/// labeled alternative in <see cref="ExpressionsParser.fact_term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNumberFactTerm([NotNull] ExpressionsParser.NumberFactTermContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>bytesFactTerm</c>
	/// labeled alternative in <see cref="ExpressionsParser.fact_term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBytesFactTerm([NotNull] ExpressionsParser.BytesFactTermContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>bytesFactTerm</c>
	/// labeled alternative in <see cref="ExpressionsParser.fact_term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBytesFactTerm([NotNull] ExpressionsParser.BytesFactTermContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>dateFactTerm</c>
	/// labeled alternative in <see cref="ExpressionsParser.fact_term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDateFactTerm([NotNull] ExpressionsParser.DateFactTermContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>dateFactTerm</c>
	/// labeled alternative in <see cref="ExpressionsParser.fact_term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDateFactTerm([NotNull] ExpressionsParser.DateFactTermContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>setFactTerm</c>
	/// labeled alternative in <see cref="ExpressionsParser.fact_term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSetFactTerm([NotNull] ExpressionsParser.SetFactTermContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>setFactTerm</c>
	/// labeled alternative in <see cref="ExpressionsParser.fact_term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSetFactTerm([NotNull] ExpressionsParser.SetFactTermContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>booleanSetTerm</c>
	/// labeled alternative in <see cref="ExpressionsParser.set_term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBooleanSetTerm([NotNull] ExpressionsParser.BooleanSetTermContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>booleanSetTerm</c>
	/// labeled alternative in <see cref="ExpressionsParser.set_term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBooleanSetTerm([NotNull] ExpressionsParser.BooleanSetTermContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>stringSetTerm</c>
	/// labeled alternative in <see cref="ExpressionsParser.set_term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStringSetTerm([NotNull] ExpressionsParser.StringSetTermContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>stringSetTerm</c>
	/// labeled alternative in <see cref="ExpressionsParser.set_term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStringSetTerm([NotNull] ExpressionsParser.StringSetTermContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>numberSetTerm</c>
	/// labeled alternative in <see cref="ExpressionsParser.set_term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNumberSetTerm([NotNull] ExpressionsParser.NumberSetTermContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>numberSetTerm</c>
	/// labeled alternative in <see cref="ExpressionsParser.set_term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNumberSetTerm([NotNull] ExpressionsParser.NumberSetTermContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>bytesSetTerm</c>
	/// labeled alternative in <see cref="ExpressionsParser.set_term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBytesSetTerm([NotNull] ExpressionsParser.BytesSetTermContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>bytesSetTerm</c>
	/// labeled alternative in <see cref="ExpressionsParser.set_term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBytesSetTerm([NotNull] ExpressionsParser.BytesSetTermContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>dateSetTerm</c>
	/// labeled alternative in <see cref="ExpressionsParser.set_term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDateSetTerm([NotNull] ExpressionsParser.DateSetTermContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>dateSetTerm</c>
	/// labeled alternative in <see cref="ExpressionsParser.set_term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDateSetTerm([NotNull] ExpressionsParser.DateSetTermContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="ExpressionsParser.set"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSet([NotNull] ExpressionsParser.SetContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="ExpressionsParser.set"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSet([NotNull] ExpressionsParser.SetContext context);
}
