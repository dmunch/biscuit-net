//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Expressions.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class ExpressionsParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, VARIABLE=11, STRING=12, NUMBER=13, BYTES=14, BOOLEAN=15, DATE=16, 
		METHOD_NAME=17, OPERATOR=18, WS=19;
	public const int
		RULE_check = 0, RULE_rule_body = 1, RULE_rule_body_element = 2, RULE_expression = 3, 
		RULE_expression_element = 4, RULE_expression_unary = 5, RULE_expression_term = 6, 
		RULE_expression_method = 7, RULE_term = 8, RULE_fact_term = 9, RULE_set_term = 10, 
		RULE_set = 11;
	public static readonly string[] ruleNames = {
		"check", "rule_body", "rule_body_element", "expression", "expression_element", 
		"expression_unary", "expression_term", "expression_method", "term", "fact_term", 
		"set_term", "set"
	};

	private static readonly string[] _LiteralNames = {
		null, "'check'", "'if'", "'or'", "','", "'!'", "'('", "')'", "'.'", "'['", 
		"']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, "VARIABLE", 
		"STRING", "NUMBER", "BYTES", "BOOLEAN", "DATE", "METHOD_NAME", "OPERATOR", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Expressions.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ExpressionsParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ExpressionsParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ExpressionsParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class CheckContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Rule_bodyContext[] rule_body() {
			return GetRuleContexts<Rule_bodyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rule_bodyContext rule_body(int i) {
			return GetRuleContext<Rule_bodyContext>(i);
		}
		public CheckContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_check; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.EnterCheck(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.ExitCheck(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionsVisitor<TResult> typedVisitor = visitor as IExpressionsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCheck(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CheckContext check() {
		CheckContext _localctx = new CheckContext(Context, State);
		EnterRule(_localctx, 0, RULE_check);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 24;
			Match(T__0);
			State = 25;
			Match(T__1);
			State = 26;
			rule_body();
			State = 31;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__2) {
				{
				{
				State = 27;
				Match(T__2);
				State = 28;
				rule_body();
				}
				}
				State = 33;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Rule_body_elementContext[] rule_body_element() {
			return GetRuleContexts<Rule_body_elementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rule_body_elementContext rule_body_element(int i) {
			return GetRuleContext<Rule_body_elementContext>(i);
		}
		public Rule_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.EnterRule_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.ExitRule_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionsVisitor<TResult> typedVisitor = visitor as IExpressionsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRule_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rule_bodyContext rule_body() {
		Rule_bodyContext _localctx = new Rule_bodyContext(Context, State);
		EnterRule(_localctx, 2, RULE_rule_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 34;
			rule_body_element();
			State = 39;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__3) {
				{
				{
				State = 35;
				Match(T__3);
				State = 36;
				rule_body_element();
				}
				}
				State = 41;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_body_elementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Rule_body_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_body_element; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.EnterRule_body_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.ExitRule_body_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionsVisitor<TResult> typedVisitor = visitor as IExpressionsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRule_body_element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rule_body_elementContext rule_body_element() {
		Rule_body_elementContext _localctx = new Rule_body_elementContext(Context, State);
		EnterRule(_localctx, 4, RULE_rule_body_element);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 42;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expression_elementContext[] expression_element() {
			return GetRuleContexts<Expression_elementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expression_elementContext expression_element(int i) {
			return GetRuleContext<Expression_elementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPERATOR() { return GetTokens(ExpressionsParser.OPERATOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR(int i) {
			return GetToken(ExpressionsParser.OPERATOR, i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionsVisitor<TResult> typedVisitor = visitor as IExpressionsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 6, RULE_expression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 44;
			expression_element();
			State = 49;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 45;
					Match(OPERATOR);
					State = 46;
					expression_element();
					}
					} 
				}
				State = 51;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_elementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expression_unaryContext expression_unary() {
			return GetRuleContext<Expression_unaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expression_termContext expression_term() {
			return GetRuleContext<Expression_termContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expression_methodContext expression_method() {
			return GetRuleContext<Expression_methodContext>(0);
		}
		public Expression_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_element; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.EnterExpression_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.ExitExpression_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionsVisitor<TResult> typedVisitor = visitor as IExpressionsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_elementContext expression_element() {
		Expression_elementContext _localctx = new Expression_elementContext(Context, State);
		EnterRule(_localctx, 8, RULE_expression_element);
		int _la;
		try {
			State = 57;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__4:
				EnterOuterAlt(_localctx, 1);
				{
				State = 52;
				expression_unary();
				}
				break;
			case T__5:
			case T__8:
			case VARIABLE:
			case STRING:
			case NUMBER:
			case BYTES:
			case BOOLEAN:
			case DATE:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 53;
				expression_term();
				State = 55;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__7) {
					{
					State = 54;
					expression_method();
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_unaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Expression_unaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_unary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.EnterExpression_unary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.ExitExpression_unary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionsVisitor<TResult> typedVisitor = visitor as IExpressionsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_unary(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_unaryContext expression_unary() {
		Expression_unaryContext _localctx = new Expression_unaryContext(Context, State);
		EnterRule(_localctx, 10, RULE_expression_unary);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 59;
			Match(T__4);
			State = 60;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_termContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Expression_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.EnterExpression_term(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.ExitExpression_term(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionsVisitor<TResult> typedVisitor = visitor as IExpressionsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_term(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_termContext expression_term() {
		Expression_termContext _localctx = new Expression_termContext(Context, State);
		EnterRule(_localctx, 12, RULE_expression_term);
		try {
			State = 67;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__8:
			case VARIABLE:
			case STRING:
			case NUMBER:
			case BYTES:
			case BOOLEAN:
			case DATE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 62;
				term();
				}
				break;
			case T__5:
				EnterOuterAlt(_localctx, 2);
				{
				State = 63;
				Match(T__5);
				State = 64;
				expression();
				State = 65;
				Match(T__6);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_methodContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode METHOD_NAME() { return GetToken(ExpressionsParser.METHOD_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		public Expression_methodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_method; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.EnterExpression_method(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.ExitExpression_method(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionsVisitor<TResult> typedVisitor = visitor as IExpressionsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression_method(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Expression_methodContext expression_method() {
		Expression_methodContext _localctx = new Expression_methodContext(Context, State);
		EnterRule(_localctx, 14, RULE_expression_method);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 69;
			Match(T__7);
			State = 70;
			Match(METHOD_NAME);
			State = 71;
			Match(T__5);
			State = 80;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 129536L) != 0) {
				{
				State = 72;
				term();
				State = 77;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__3) {
					{
					{
					State = 73;
					Match(T__3);
					State = 74;
					term();
					}
					}
					State = 79;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 82;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Fact_termContext fact_term() {
			return GetRuleContext<Fact_termContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(ExpressionsParser.VARIABLE, 0); }
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionsVisitor<TResult> typedVisitor = visitor as IExpressionsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 16, RULE_term);
		try {
			State = 86;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__8:
			case STRING:
			case NUMBER:
			case BYTES:
			case BOOLEAN:
			case DATE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 84;
				fact_term();
				}
				break;
			case VARIABLE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 85;
				Match(VARIABLE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fact_termContext : ParserRuleContext {
		public Fact_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fact_term; } }
	 
		public Fact_termContext() { }
		public virtual void CopyFrom(Fact_termContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StringFactTermContext : Fact_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(ExpressionsParser.STRING, 0); }
		public StringFactTermContext(Fact_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.EnterStringFactTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.ExitStringFactTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionsVisitor<TResult> typedVisitor = visitor as IExpressionsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringFactTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BytesFactTermContext : Fact_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BYTES() { return GetToken(ExpressionsParser.BYTES, 0); }
		public BytesFactTermContext(Fact_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.EnterBytesFactTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.ExitBytesFactTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionsVisitor<TResult> typedVisitor = visitor as IExpressionsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBytesFactTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanFactTermContext : Fact_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(ExpressionsParser.BOOLEAN, 0); }
		public BooleanFactTermContext(Fact_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.EnterBooleanFactTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.ExitBooleanFactTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionsVisitor<TResult> typedVisitor = visitor as IExpressionsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanFactTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DateFactTermContext : Fact_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE() { return GetToken(ExpressionsParser.DATE, 0); }
		public DateFactTermContext(Fact_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.EnterDateFactTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.ExitDateFactTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionsVisitor<TResult> typedVisitor = visitor as IExpressionsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateFactTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberFactTermContext : Fact_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(ExpressionsParser.NUMBER, 0); }
		public NumberFactTermContext(Fact_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.EnterNumberFactTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.ExitNumberFactTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionsVisitor<TResult> typedVisitor = visitor as IExpressionsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberFactTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SetFactTermContext : Fact_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public SetContext set() {
			return GetRuleContext<SetContext>(0);
		}
		public SetFactTermContext(Fact_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.EnterSetFactTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.ExitSetFactTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionsVisitor<TResult> typedVisitor = visitor as IExpressionsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetFactTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fact_termContext fact_term() {
		Fact_termContext _localctx = new Fact_termContext(Context, State);
		EnterRule(_localctx, 18, RULE_fact_term);
		try {
			State = 94;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOLEAN:
				_localctx = new BooleanFactTermContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 88;
				Match(BOOLEAN);
				}
				break;
			case STRING:
				_localctx = new StringFactTermContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 89;
				Match(STRING);
				}
				break;
			case NUMBER:
				_localctx = new NumberFactTermContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 90;
				Match(NUMBER);
				}
				break;
			case BYTES:
				_localctx = new BytesFactTermContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 91;
				Match(BYTES);
				}
				break;
			case DATE:
				_localctx = new DateFactTermContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 92;
				Match(DATE);
				}
				break;
			case T__8:
				_localctx = new SetFactTermContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 93;
				set();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_termContext : ParserRuleContext {
		public Set_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_term; } }
	 
		public Set_termContext() { }
		public virtual void CopyFrom(Set_termContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BytesSetTermContext : Set_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BYTES() { return GetToken(ExpressionsParser.BYTES, 0); }
		public BytesSetTermContext(Set_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.EnterBytesSetTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.ExitBytesSetTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionsVisitor<TResult> typedVisitor = visitor as IExpressionsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBytesSetTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringSetTermContext : Set_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(ExpressionsParser.STRING, 0); }
		public StringSetTermContext(Set_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.EnterStringSetTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.ExitStringSetTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionsVisitor<TResult> typedVisitor = visitor as IExpressionsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringSetTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DateSetTermContext : Set_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE() { return GetToken(ExpressionsParser.DATE, 0); }
		public DateSetTermContext(Set_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.EnterDateSetTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.ExitDateSetTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionsVisitor<TResult> typedVisitor = visitor as IExpressionsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateSetTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberSetTermContext : Set_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(ExpressionsParser.NUMBER, 0); }
		public NumberSetTermContext(Set_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.EnterNumberSetTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.ExitNumberSetTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionsVisitor<TResult> typedVisitor = visitor as IExpressionsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberSetTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanSetTermContext : Set_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(ExpressionsParser.BOOLEAN, 0); }
		public BooleanSetTermContext(Set_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.EnterBooleanSetTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.ExitBooleanSetTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionsVisitor<TResult> typedVisitor = visitor as IExpressionsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanSetTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Set_termContext set_term() {
		Set_termContext _localctx = new Set_termContext(Context, State);
		EnterRule(_localctx, 20, RULE_set_term);
		try {
			State = 101;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOLEAN:
				_localctx = new BooleanSetTermContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 96;
				Match(BOOLEAN);
				}
				break;
			case STRING:
				_localctx = new StringSetTermContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 97;
				Match(STRING);
				}
				break;
			case NUMBER:
				_localctx = new NumberSetTermContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 98;
				Match(NUMBER);
				}
				break;
			case BYTES:
				_localctx = new BytesSetTermContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 99;
				Match(BYTES);
				}
				break;
			case DATE:
				_localctx = new DateSetTermContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 100;
				Match(DATE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Fact_termContext fact_term() {
			return GetRuleContext<Fact_termContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Set_termContext[] set_term() {
			return GetRuleContexts<Set_termContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Set_termContext set_term(int i) {
			return GetRuleContext<Set_termContext>(i);
		}
		public SetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.EnterSet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.ExitSet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionsVisitor<TResult> typedVisitor = visitor as IExpressionsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetContext set() {
		SetContext _localctx = new SetContext(Context, State);
		EnterRule(_localctx, 22, RULE_set);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 103;
			Match(T__8);
			State = 112;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 127488L) != 0) {
				{
				State = 104;
				fact_term();
				State = 109;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__3) {
					{
					{
					State = 105;
					Match(T__3);
					State = 106;
					set_term();
					}
					}
					State = 111;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 114;
			Match(T__9);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,19,117,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,1,0,1,0,1,0,1,0,1,0,5,0,30,8,0,
		10,0,12,0,33,9,0,1,1,1,1,1,1,5,1,38,8,1,10,1,12,1,41,9,1,1,2,1,2,1,3,1,
		3,1,3,5,3,48,8,3,10,3,12,3,51,9,3,1,4,1,4,1,4,3,4,56,8,4,3,4,58,8,4,1,
		5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,3,6,68,8,6,1,7,1,7,1,7,1,7,1,7,1,7,5,7,76,
		8,7,10,7,12,7,79,9,7,3,7,81,8,7,1,7,1,7,1,8,1,8,3,8,87,8,8,1,9,1,9,1,9,
		1,9,1,9,1,9,3,9,95,8,9,1,10,1,10,1,10,1,10,1,10,3,10,102,8,10,1,11,1,11,
		1,11,1,11,5,11,108,8,11,10,11,12,11,111,9,11,3,11,113,8,11,1,11,1,11,1,
		11,0,0,12,0,2,4,6,8,10,12,14,16,18,20,22,0,0,124,0,24,1,0,0,0,2,34,1,0,
		0,0,4,42,1,0,0,0,6,44,1,0,0,0,8,57,1,0,0,0,10,59,1,0,0,0,12,67,1,0,0,0,
		14,69,1,0,0,0,16,86,1,0,0,0,18,94,1,0,0,0,20,101,1,0,0,0,22,103,1,0,0,
		0,24,25,5,1,0,0,25,26,5,2,0,0,26,31,3,2,1,0,27,28,5,3,0,0,28,30,3,2,1,
		0,29,27,1,0,0,0,30,33,1,0,0,0,31,29,1,0,0,0,31,32,1,0,0,0,32,1,1,0,0,0,
		33,31,1,0,0,0,34,39,3,4,2,0,35,36,5,4,0,0,36,38,3,4,2,0,37,35,1,0,0,0,
		38,41,1,0,0,0,39,37,1,0,0,0,39,40,1,0,0,0,40,3,1,0,0,0,41,39,1,0,0,0,42,
		43,3,6,3,0,43,5,1,0,0,0,44,49,3,8,4,0,45,46,5,18,0,0,46,48,3,8,4,0,47,
		45,1,0,0,0,48,51,1,0,0,0,49,47,1,0,0,0,49,50,1,0,0,0,50,7,1,0,0,0,51,49,
		1,0,0,0,52,58,3,10,5,0,53,55,3,12,6,0,54,56,3,14,7,0,55,54,1,0,0,0,55,
		56,1,0,0,0,56,58,1,0,0,0,57,52,1,0,0,0,57,53,1,0,0,0,58,9,1,0,0,0,59,60,
		5,5,0,0,60,61,3,6,3,0,61,11,1,0,0,0,62,68,3,16,8,0,63,64,5,6,0,0,64,65,
		3,6,3,0,65,66,5,7,0,0,66,68,1,0,0,0,67,62,1,0,0,0,67,63,1,0,0,0,68,13,
		1,0,0,0,69,70,5,8,0,0,70,71,5,17,0,0,71,80,5,6,0,0,72,77,3,16,8,0,73,74,
		5,4,0,0,74,76,3,16,8,0,75,73,1,0,0,0,76,79,1,0,0,0,77,75,1,0,0,0,77,78,
		1,0,0,0,78,81,1,0,0,0,79,77,1,0,0,0,80,72,1,0,0,0,80,81,1,0,0,0,81,82,
		1,0,0,0,82,83,5,7,0,0,83,15,1,0,0,0,84,87,3,18,9,0,85,87,5,11,0,0,86,84,
		1,0,0,0,86,85,1,0,0,0,87,17,1,0,0,0,88,95,5,15,0,0,89,95,5,12,0,0,90,95,
		5,13,0,0,91,95,5,14,0,0,92,95,5,16,0,0,93,95,3,22,11,0,94,88,1,0,0,0,94,
		89,1,0,0,0,94,90,1,0,0,0,94,91,1,0,0,0,94,92,1,0,0,0,94,93,1,0,0,0,95,
		19,1,0,0,0,96,102,5,15,0,0,97,102,5,12,0,0,98,102,5,13,0,0,99,102,5,14,
		0,0,100,102,5,16,0,0,101,96,1,0,0,0,101,97,1,0,0,0,101,98,1,0,0,0,101,
		99,1,0,0,0,101,100,1,0,0,0,102,21,1,0,0,0,103,112,5,9,0,0,104,109,3,18,
		9,0,105,106,5,4,0,0,106,108,3,20,10,0,107,105,1,0,0,0,108,111,1,0,0,0,
		109,107,1,0,0,0,109,110,1,0,0,0,110,113,1,0,0,0,111,109,1,0,0,0,112,104,
		1,0,0,0,112,113,1,0,0,0,113,114,1,0,0,0,114,115,5,10,0,0,115,23,1,0,0,
		0,13,31,39,49,55,57,67,77,80,86,94,101,109,112
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
