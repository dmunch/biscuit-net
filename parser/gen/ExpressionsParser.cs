//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Expressions.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class ExpressionsParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, WS=6, VARIABLE=7, TERM=8, FACT_TERM=9, 
		SET_TERM=10, STRING=11, NUMBER=12, BYTES=13, BOOLEAN=14, DATE=15, SET=16, 
		METHOD_NAME=17, OPERATOR=18;
	public const int
		RULE_expression = 0, RULE_expression_element = 1, RULE_expression_unary = 2, 
		RULE_expression_method = 3, RULE_expression_term = 4;
	public static readonly string[] ruleNames = {
		"expression", "expression_element", "expression_unary", "expression_method", 
		"expression_term"
	};

	private static readonly string[] _LiteralNames = {
		null, "'!'", "'.'", "'('", "','", "')'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, "WS", "VARIABLE", "TERM", "FACT_TERM", 
		"SET_TERM", "STRING", "NUMBER", "BYTES", "BOOLEAN", "DATE", "SET", "METHOD_NAME", 
		"OPERATOR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Expressions.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ExpressionsParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ExpressionsParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ExpressionsParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expression_elementContext[] expression_element() {
			return GetRuleContexts<Expression_elementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expression_elementContext expression_element(int i) {
			return GetRuleContext<Expression_elementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(ExpressionsParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(ExpressionsParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OPERATOR() { return GetTokens(ExpressionsParser.OPERATOR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OPERATOR(int i) {
			return GetToken(ExpressionsParser.OPERATOR, i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 0, RULE_expression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 10;
			expression_element();
			State = 17;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 11;
					Match(WS);
					State = 12;
					Match(OPERATOR);
					State = 13;
					Match(WS);
					State = 14;
					expression_element();
					}
					} 
				}
				State = 19;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_elementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expression_unaryContext expression_unary() {
			return GetRuleContext<Expression_unaryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expression_termContext expression_term() {
			return GetRuleContext<Expression_termContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expression_methodContext expression_method() {
			return GetRuleContext<Expression_methodContext>(0);
		}
		public Expression_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_element; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.EnterExpression_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.ExitExpression_element(this);
		}
	}

	[RuleVersion(0)]
	public Expression_elementContext expression_element() {
		Expression_elementContext _localctx = new Expression_elementContext(Context, State);
		EnterRule(_localctx, 2, RULE_expression_element);
		int _la;
		try {
			State = 25;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				EnterOuterAlt(_localctx, 1);
				{
				State = 20;
				expression_unary();
				}
				break;
			case T__2:
			case TERM:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 21;
				expression_term();
				State = 23;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==T__1) {
					{
					State = 22;
					expression_method();
					}
				}

				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_unaryContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS() { return GetToken(ExpressionsParser.WS, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Expression_unaryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_unary; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.EnterExpression_unary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.ExitExpression_unary(this);
		}
	}

	[RuleVersion(0)]
	public Expression_unaryContext expression_unary() {
		Expression_unaryContext _localctx = new Expression_unaryContext(Context, State);
		EnterRule(_localctx, 4, RULE_expression_unary);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 27;
			Match(T__0);
			State = 28;
			Match(WS);
			State = 29;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_methodContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode METHOD_NAME() { return GetToken(ExpressionsParser.METHOD_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(ExpressionsParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(ExpressionsParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TERM() { return GetTokens(ExpressionsParser.TERM); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TERM(int i) {
			return GetToken(ExpressionsParser.TERM, i);
		}
		public Expression_methodContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_method; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.EnterExpression_method(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.ExitExpression_method(this);
		}
	}

	[RuleVersion(0)]
	public Expression_methodContext expression_method() {
		Expression_methodContext _localctx = new Expression_methodContext(Context, State);
		EnterRule(_localctx, 6, RULE_expression_method);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 31;
			Match(T__1);
			State = 32;
			Match(METHOD_NAME);
			State = 33;
			Match(T__2);
			State = 34;
			Match(WS);
			State = 45;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==TERM) {
				{
				State = 35;
				Match(TERM);
				State = 42;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						State = 36;
						Match(WS);
						State = 37;
						Match(T__3);
						State = 38;
						Match(WS);
						State = 39;
						Match(TERM);
						}
						} 
					}
					State = 44;
					ErrorHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
				}
				}
			}

			State = 47;
			Match(WS);
			State = 48;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_termContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TERM() { return GetToken(ExpressionsParser.TERM, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(ExpressionsParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(ExpressionsParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Expression_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.EnterExpression_term(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.ExitExpression_term(this);
		}
	}

	[RuleVersion(0)]
	public Expression_termContext expression_term() {
		Expression_termContext _localctx = new Expression_termContext(Context, State);
		EnterRule(_localctx, 8, RULE_expression_term);
		try {
			State = 57;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TERM:
				EnterOuterAlt(_localctx, 1);
				{
				State = 50;
				Match(TERM);
				}
				break;
			case T__2:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 51;
				Match(T__2);
				State = 52;
				Match(WS);
				State = 53;
				expression();
				State = 54;
				Match(WS);
				State = 55;
				Match(T__4);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,18,60,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,1,0,1,0,1,0,1,0,1,0,
		5,0,16,8,0,10,0,12,0,19,9,0,1,1,1,1,1,1,3,1,24,8,1,3,1,26,8,1,1,2,1,2,
		1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,5,3,41,8,3,10,3,12,3,44,9,
		3,3,3,46,8,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,58,8,4,1,4,0,
		0,5,0,2,4,6,8,0,0,60,0,10,1,0,0,0,2,25,1,0,0,0,4,27,1,0,0,0,6,31,1,0,0,
		0,8,57,1,0,0,0,10,17,3,2,1,0,11,12,5,6,0,0,12,13,5,18,0,0,13,14,5,6,0,
		0,14,16,3,2,1,0,15,11,1,0,0,0,16,19,1,0,0,0,17,15,1,0,0,0,17,18,1,0,0,
		0,18,1,1,0,0,0,19,17,1,0,0,0,20,26,3,4,2,0,21,23,3,8,4,0,22,24,3,6,3,0,
		23,22,1,0,0,0,23,24,1,0,0,0,24,26,1,0,0,0,25,20,1,0,0,0,25,21,1,0,0,0,
		26,3,1,0,0,0,27,28,5,1,0,0,28,29,5,6,0,0,29,30,3,0,0,0,30,5,1,0,0,0,31,
		32,5,2,0,0,32,33,5,17,0,0,33,34,5,3,0,0,34,45,5,6,0,0,35,42,5,8,0,0,36,
		37,5,6,0,0,37,38,5,4,0,0,38,39,5,6,0,0,39,41,5,8,0,0,40,36,1,0,0,0,41,
		44,1,0,0,0,42,40,1,0,0,0,42,43,1,0,0,0,43,46,1,0,0,0,44,42,1,0,0,0,45,
		35,1,0,0,0,45,46,1,0,0,0,46,47,1,0,0,0,47,48,5,6,0,0,48,49,5,5,0,0,49,
		7,1,0,0,0,50,58,5,8,0,0,51,52,5,3,0,0,52,53,5,6,0,0,53,54,3,0,0,0,54,55,
		5,6,0,0,55,56,5,5,0,0,56,58,1,0,0,0,57,50,1,0,0,0,57,51,1,0,0,0,58,9,1,
		0,0,0,6,17,23,25,42,45,57
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
