//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Expressions.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class ExpressionsParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, VARIABLE=22, STRING=23, NUMBER=24, 
		BYTES=25, BOOLEAN=26, DATE=27, METHOD_NAME=28, OPERATOR=29, WS=30;
	public const int
		RULE_check = 0, RULE_rule_body = 1, RULE_rule_body_element = 2, RULE_expression = 3, 
		RULE_term = 4, RULE_fact_term = 5, RULE_set_term = 6, RULE_set = 7;
	public static readonly string[] ruleNames = {
		"check", "rule_body", "rule_body_element", "expression", "term", "fact_term", 
		"set_term", "set"
	};

	private static readonly string[] _LiteralNames = {
		null, "'check'", "'if'", "'or'", "','", "'!'", "'('", "')'", "'*'", "'/'", 
		"'+'", "'-'", "'||'", "'&&'", "'>='", "'<='", "'>'", "'<'", "'=='", "'.'", 
		"'['", "']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, "VARIABLE", 
		"STRING", "NUMBER", "BYTES", "BOOLEAN", "DATE", "METHOD_NAME", "OPERATOR", 
		"WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Expressions.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ExpressionsParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public ExpressionsParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public ExpressionsParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class CheckContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Rule_bodyContext[] rule_body() {
			return GetRuleContexts<Rule_bodyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rule_bodyContext rule_body(int i) {
			return GetRuleContext<Rule_bodyContext>(i);
		}
		public CheckContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_check; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.EnterCheck(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.ExitCheck(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionsVisitor<TResult> typedVisitor = visitor as IExpressionsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCheck(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CheckContext check() {
		CheckContext _localctx = new CheckContext(Context, State);
		EnterRule(_localctx, 0, RULE_check);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 16;
			Match(T__0);
			State = 17;
			Match(T__1);
			State = 18;
			rule_body();
			State = 23;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__2) {
				{
				{
				State = 19;
				Match(T__2);
				State = 20;
				rule_body();
				}
				}
				State = 25;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Rule_body_elementContext[] rule_body_element() {
			return GetRuleContexts<Rule_body_elementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rule_body_elementContext rule_body_element(int i) {
			return GetRuleContext<Rule_body_elementContext>(i);
		}
		public Rule_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.EnterRule_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.ExitRule_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionsVisitor<TResult> typedVisitor = visitor as IExpressionsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRule_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rule_bodyContext rule_body() {
		Rule_bodyContext _localctx = new Rule_bodyContext(Context, State);
		EnterRule(_localctx, 2, RULE_rule_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 26;
			rule_body_element();
			State = 31;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__3) {
				{
				{
				State = 27;
				Match(T__3);
				State = 28;
				rule_body_element();
				}
				}
				State = 33;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_body_elementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Rule_body_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_body_element; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.EnterRule_body_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.ExitRule_body_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionsVisitor<TResult> typedVisitor = visitor as IExpressionsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRule_body_element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rule_body_elementContext rule_body_element() {
		Rule_body_elementContext _localctx = new Rule_body_elementContext(Context, State);
		EnterRule(_localctx, 4, RULE_rule_body_element);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 34;
			expression(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExpressionAddContext : ExpressionContext {
		public IToken add;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExpressionAddContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.EnterExpressionAdd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.ExitExpressionAdd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionsVisitor<TResult> typedVisitor = visitor as IExpressionsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionAdd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionLogicContext : ExpressionContext {
		public IToken logic;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExpressionLogicContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.EnterExpressionLogic(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.ExitExpressionLogic(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionsVisitor<TResult> typedVisitor = visitor as IExpressionsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionLogic(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionUnaryContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionUnaryContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.EnterExpressionUnary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.ExitExpressionUnary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionsVisitor<TResult> typedVisitor = visitor as IExpressionsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionUnary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionParenthesesContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionParenthesesContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.EnterExpressionParentheses(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.ExitExpressionParentheses(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionsVisitor<TResult> typedVisitor = visitor as IExpressionsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionParentheses(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionCompContext : ExpressionContext {
		public IToken comp;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExpressionCompContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.EnterExpressionComp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.ExitExpressionComp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionsVisitor<TResult> typedVisitor = visitor as IExpressionsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionComp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionMethodContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode METHOD_NAME() { return GetToken(ExpressionsParser.METHOD_NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		public ExpressionMethodContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.EnterExpressionMethod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.ExitExpressionMethod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionsVisitor<TResult> typedVisitor = visitor as IExpressionsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionMethod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionTermContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Fact_termContext fact_term() {
			return GetRuleContext<Fact_termContext>(0);
		}
		public ExpressionTermContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.EnterExpressionTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.ExitExpressionTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionsVisitor<TResult> typedVisitor = visitor as IExpressionsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionMultContext : ExpressionContext {
		public IToken mult;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExpressionMultContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.EnterExpressionMult(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.ExitExpressionMult(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionsVisitor<TResult> typedVisitor = visitor as IExpressionsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionMult(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionVariableContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(ExpressionsParser.VARIABLE, 0); }
		public ExpressionVariableContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.EnterExpressionVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.ExitExpressionVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionsVisitor<TResult> typedVisitor = visitor as IExpressionsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 6;
		EnterRecursionRule(_localctx, 6, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 45;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__4:
				{
				_localctx = new ExpressionUnaryContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 37;
				Match(T__4);
				State = 38;
				expression(9);
				}
				break;
			case T__5:
				{
				_localctx = new ExpressionParenthesesContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 39;
				Match(T__5);
				State = 40;
				expression(0);
				State = 41;
				Match(T__6);
				}
				break;
			case T__19:
			case STRING:
			case NUMBER:
			case BYTES:
			case BOOLEAN:
			case DATE:
				{
				_localctx = new ExpressionTermContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 43;
				fact_term();
				}
				break;
			case VARIABLE:
				{
				_localctx = new ExpressionVariableContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 44;
				Match(VARIABLE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 76;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 74;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
					case 1:
						{
						_localctx = new ExpressionMultContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 47;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 48;
						((ExpressionMultContext)_localctx).mult = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__7 || _la==T__8) ) {
							((ExpressionMultContext)_localctx).mult = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 49;
						expression(8);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionAddContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 50;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 51;
						((ExpressionAddContext)_localctx).add = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__9 || _la==T__10) ) {
							((ExpressionAddContext)_localctx).add = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 52;
						expression(7);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionLogicContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 53;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 54;
						((ExpressionLogicContext)_localctx).logic = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__11 || _la==T__12) ) {
							((ExpressionLogicContext)_localctx).logic = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 55;
						expression(6);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionCompContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 56;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 57;
						((ExpressionCompContext)_localctx).comp = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 507904L) != 0) ) {
							((ExpressionCompContext)_localctx).comp = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 58;
						expression(5);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionMethodContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 59;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 60;
						Match(T__18);
						State = 61;
						Match(METHOD_NAME);
						State = 62;
						Match(T__5);
						State = 71;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (((_la) & ~0x3f) == 0 && ((1L << _la) & 265289728L) != 0) {
							{
							State = 63;
							term();
							State = 68;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							while (_la==T__3) {
								{
								{
								State = 64;
								Match(T__3);
								State = 65;
								term();
								}
								}
								State = 70;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
							}
							}
						}

						State = 73;
						Match(T__6);
						}
						break;
					}
					} 
				}
				State = 78;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Fact_termContext fact_term() {
			return GetRuleContext<Fact_termContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(ExpressionsParser.VARIABLE, 0); }
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionsVisitor<TResult> typedVisitor = visitor as IExpressionsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 8, RULE_term);
		try {
			State = 81;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__19:
			case STRING:
			case NUMBER:
			case BYTES:
			case BOOLEAN:
			case DATE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 79;
				fact_term();
				}
				break;
			case VARIABLE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 80;
				Match(VARIABLE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fact_termContext : ParserRuleContext {
		public Fact_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fact_term; } }
	 
		public Fact_termContext() { }
		public virtual void CopyFrom(Fact_termContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StringFactTermContext : Fact_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(ExpressionsParser.STRING, 0); }
		public StringFactTermContext(Fact_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.EnterStringFactTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.ExitStringFactTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionsVisitor<TResult> typedVisitor = visitor as IExpressionsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringFactTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BytesFactTermContext : Fact_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BYTES() { return GetToken(ExpressionsParser.BYTES, 0); }
		public BytesFactTermContext(Fact_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.EnterBytesFactTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.ExitBytesFactTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionsVisitor<TResult> typedVisitor = visitor as IExpressionsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBytesFactTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanFactTermContext : Fact_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(ExpressionsParser.BOOLEAN, 0); }
		public BooleanFactTermContext(Fact_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.EnterBooleanFactTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.ExitBooleanFactTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionsVisitor<TResult> typedVisitor = visitor as IExpressionsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanFactTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DateFactTermContext : Fact_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE() { return GetToken(ExpressionsParser.DATE, 0); }
		public DateFactTermContext(Fact_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.EnterDateFactTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.ExitDateFactTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionsVisitor<TResult> typedVisitor = visitor as IExpressionsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateFactTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberFactTermContext : Fact_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(ExpressionsParser.NUMBER, 0); }
		public NumberFactTermContext(Fact_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.EnterNumberFactTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.ExitNumberFactTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionsVisitor<TResult> typedVisitor = visitor as IExpressionsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberFactTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SetFactTermContext : Fact_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public SetContext set() {
			return GetRuleContext<SetContext>(0);
		}
		public SetFactTermContext(Fact_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.EnterSetFactTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.ExitSetFactTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionsVisitor<TResult> typedVisitor = visitor as IExpressionsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetFactTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fact_termContext fact_term() {
		Fact_termContext _localctx = new Fact_termContext(Context, State);
		EnterRule(_localctx, 10, RULE_fact_term);
		try {
			State = 89;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOLEAN:
				_localctx = new BooleanFactTermContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 83;
				Match(BOOLEAN);
				}
				break;
			case STRING:
				_localctx = new StringFactTermContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 84;
				Match(STRING);
				}
				break;
			case NUMBER:
				_localctx = new NumberFactTermContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 85;
				Match(NUMBER);
				}
				break;
			case BYTES:
				_localctx = new BytesFactTermContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 86;
				Match(BYTES);
				}
				break;
			case DATE:
				_localctx = new DateFactTermContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 87;
				Match(DATE);
				}
				break;
			case T__19:
				_localctx = new SetFactTermContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 88;
				set();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_termContext : ParserRuleContext {
		public Set_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_term; } }
	 
		public Set_termContext() { }
		public virtual void CopyFrom(Set_termContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class BytesSetTermContext : Set_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BYTES() { return GetToken(ExpressionsParser.BYTES, 0); }
		public BytesSetTermContext(Set_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.EnterBytesSetTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.ExitBytesSetTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionsVisitor<TResult> typedVisitor = visitor as IExpressionsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBytesSetTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringSetTermContext : Set_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(ExpressionsParser.STRING, 0); }
		public StringSetTermContext(Set_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.EnterStringSetTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.ExitStringSetTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionsVisitor<TResult> typedVisitor = visitor as IExpressionsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringSetTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DateSetTermContext : Set_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE() { return GetToken(ExpressionsParser.DATE, 0); }
		public DateSetTermContext(Set_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.EnterDateSetTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.ExitDateSetTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionsVisitor<TResult> typedVisitor = visitor as IExpressionsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateSetTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberSetTermContext : Set_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(ExpressionsParser.NUMBER, 0); }
		public NumberSetTermContext(Set_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.EnterNumberSetTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.ExitNumberSetTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionsVisitor<TResult> typedVisitor = visitor as IExpressionsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberSetTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanSetTermContext : Set_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(ExpressionsParser.BOOLEAN, 0); }
		public BooleanSetTermContext(Set_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.EnterBooleanSetTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.ExitBooleanSetTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionsVisitor<TResult> typedVisitor = visitor as IExpressionsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanSetTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Set_termContext set_term() {
		Set_termContext _localctx = new Set_termContext(Context, State);
		EnterRule(_localctx, 12, RULE_set_term);
		try {
			State = 96;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOLEAN:
				_localctx = new BooleanSetTermContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 91;
				Match(BOOLEAN);
				}
				break;
			case STRING:
				_localctx = new StringSetTermContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 92;
				Match(STRING);
				}
				break;
			case NUMBER:
				_localctx = new NumberSetTermContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 93;
				Match(NUMBER);
				}
				break;
			case BYTES:
				_localctx = new BytesSetTermContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 94;
				Match(BYTES);
				}
				break;
			case DATE:
				_localctx = new DateSetTermContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 95;
				Match(DATE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Fact_termContext fact_term() {
			return GetRuleContext<Fact_termContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Set_termContext[] set_term() {
			return GetRuleContexts<Set_termContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Set_termContext set_term(int i) {
			return GetRuleContext<Set_termContext>(i);
		}
		public SetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.EnterSet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IExpressionsListener typedListener = listener as IExpressionsListener;
			if (typedListener != null) typedListener.ExitSet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IExpressionsVisitor<TResult> typedVisitor = visitor as IExpressionsVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetContext set() {
		SetContext _localctx = new SetContext(Context, State);
		EnterRule(_localctx, 14, RULE_set);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98;
			Match(T__19);
			State = 107;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 261095424L) != 0) {
				{
				State = 99;
				fact_term();
				State = 104;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__3) {
					{
					{
					State = 100;
					Match(T__3);
					State = 101;
					set_term();
					}
					}
					State = 106;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 109;
			Match(T__20);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 3: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 7);
		case 1: return Precpred(Context, 6);
		case 2: return Precpred(Context, 5);
		case 3: return Precpred(Context, 4);
		case 4: return Precpred(Context, 3);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,30,112,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,1,0,1,0,1,0,1,0,1,0,5,0,22,8,0,10,0,12,0,25,9,0,1,1,1,1,1,1,5,1,30,
		8,1,10,1,12,1,33,9,1,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,46,
		8,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,
		3,1,3,1,3,5,3,67,8,3,10,3,12,3,70,9,3,3,3,72,8,3,1,3,5,3,75,8,3,10,3,12,
		3,78,9,3,1,4,1,4,3,4,82,8,4,1,5,1,5,1,5,1,5,1,5,1,5,3,5,90,8,5,1,6,1,6,
		1,6,1,6,1,6,3,6,97,8,6,1,7,1,7,1,7,1,7,5,7,103,8,7,10,7,12,7,106,9,7,3,
		7,108,8,7,1,7,1,7,1,7,0,1,6,8,0,2,4,6,8,10,12,14,0,4,1,0,8,9,1,0,10,11,
		1,0,12,13,1,0,14,18,127,0,16,1,0,0,0,2,26,1,0,0,0,4,34,1,0,0,0,6,45,1,
		0,0,0,8,81,1,0,0,0,10,89,1,0,0,0,12,96,1,0,0,0,14,98,1,0,0,0,16,17,5,1,
		0,0,17,18,5,2,0,0,18,23,3,2,1,0,19,20,5,3,0,0,20,22,3,2,1,0,21,19,1,0,
		0,0,22,25,1,0,0,0,23,21,1,0,0,0,23,24,1,0,0,0,24,1,1,0,0,0,25,23,1,0,0,
		0,26,31,3,4,2,0,27,28,5,4,0,0,28,30,3,4,2,0,29,27,1,0,0,0,30,33,1,0,0,
		0,31,29,1,0,0,0,31,32,1,0,0,0,32,3,1,0,0,0,33,31,1,0,0,0,34,35,3,6,3,0,
		35,5,1,0,0,0,36,37,6,3,-1,0,37,38,5,5,0,0,38,46,3,6,3,9,39,40,5,6,0,0,
		40,41,3,6,3,0,41,42,5,7,0,0,42,46,1,0,0,0,43,46,3,10,5,0,44,46,5,22,0,
		0,45,36,1,0,0,0,45,39,1,0,0,0,45,43,1,0,0,0,45,44,1,0,0,0,46,76,1,0,0,
		0,47,48,10,7,0,0,48,49,7,0,0,0,49,75,3,6,3,8,50,51,10,6,0,0,51,52,7,1,
		0,0,52,75,3,6,3,7,53,54,10,5,0,0,54,55,7,2,0,0,55,75,3,6,3,6,56,57,10,
		4,0,0,57,58,7,3,0,0,58,75,3,6,3,5,59,60,10,3,0,0,60,61,5,19,0,0,61,62,
		5,28,0,0,62,71,5,6,0,0,63,68,3,8,4,0,64,65,5,4,0,0,65,67,3,8,4,0,66,64,
		1,0,0,0,67,70,1,0,0,0,68,66,1,0,0,0,68,69,1,0,0,0,69,72,1,0,0,0,70,68,
		1,0,0,0,71,63,1,0,0,0,71,72,1,0,0,0,72,73,1,0,0,0,73,75,5,7,0,0,74,47,
		1,0,0,0,74,50,1,0,0,0,74,53,1,0,0,0,74,56,1,0,0,0,74,59,1,0,0,0,75,78,
		1,0,0,0,76,74,1,0,0,0,76,77,1,0,0,0,77,7,1,0,0,0,78,76,1,0,0,0,79,82,3,
		10,5,0,80,82,5,22,0,0,81,79,1,0,0,0,81,80,1,0,0,0,82,9,1,0,0,0,83,90,5,
		26,0,0,84,90,5,23,0,0,85,90,5,24,0,0,86,90,5,25,0,0,87,90,5,27,0,0,88,
		90,3,14,7,0,89,83,1,0,0,0,89,84,1,0,0,0,89,85,1,0,0,0,89,86,1,0,0,0,89,
		87,1,0,0,0,89,88,1,0,0,0,90,11,1,0,0,0,91,97,5,26,0,0,92,97,5,23,0,0,93,
		97,5,24,0,0,94,97,5,25,0,0,95,97,5,27,0,0,96,91,1,0,0,0,96,92,1,0,0,0,
		96,93,1,0,0,0,96,94,1,0,0,0,96,95,1,0,0,0,97,13,1,0,0,0,98,107,5,20,0,
		0,99,104,3,10,5,0,100,101,5,4,0,0,101,103,3,12,6,0,102,100,1,0,0,0,103,
		106,1,0,0,0,104,102,1,0,0,0,104,105,1,0,0,0,105,108,1,0,0,0,106,104,1,
		0,0,0,107,99,1,0,0,0,107,108,1,0,0,0,108,109,1,0,0,0,109,110,5,21,0,0,
		110,15,1,0,0,0,12,23,31,45,68,71,74,76,81,89,96,104,107
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
