//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Expressions.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete generic visitor for a parse tree produced
/// by <see cref="ExpressionsParser"/>.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public interface IExpressionsVisitor<Result> : IParseTreeVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by <see cref="ExpressionsParser.check"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCheck([NotNull] ExpressionsParser.CheckContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ExpressionsParser.rule_body"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRule_body([NotNull] ExpressionsParser.Rule_bodyContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ExpressionsParser.rule_body_element"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRule_body_element([NotNull] ExpressionsParser.Rule_body_elementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ExpressionsParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpression([NotNull] ExpressionsParser.ExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ExpressionsParser.expression_element"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpression_element([NotNull] ExpressionsParser.Expression_elementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ExpressionsParser.expression_unary"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpression_unary([NotNull] ExpressionsParser.Expression_unaryContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ExpressionsParser.expression_term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpression_term([NotNull] ExpressionsParser.Expression_termContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ExpressionsParser.expression_method"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpression_method([NotNull] ExpressionsParser.Expression_methodContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ExpressionsParser.term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTerm([NotNull] ExpressionsParser.TermContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>booleanFactTerm</c>
	/// labeled alternative in <see cref="ExpressionsParser.fact_term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBooleanFactTerm([NotNull] ExpressionsParser.BooleanFactTermContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>stringFactTerm</c>
	/// labeled alternative in <see cref="ExpressionsParser.fact_term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStringFactTerm([NotNull] ExpressionsParser.StringFactTermContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>numberFactTerm</c>
	/// labeled alternative in <see cref="ExpressionsParser.fact_term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNumberFactTerm([NotNull] ExpressionsParser.NumberFactTermContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>bytesFactTerm</c>
	/// labeled alternative in <see cref="ExpressionsParser.fact_term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBytesFactTerm([NotNull] ExpressionsParser.BytesFactTermContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>dateFactTerm</c>
	/// labeled alternative in <see cref="ExpressionsParser.fact_term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDateFactTerm([NotNull] ExpressionsParser.DateFactTermContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>setFactTerm</c>
	/// labeled alternative in <see cref="ExpressionsParser.fact_term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSetFactTerm([NotNull] ExpressionsParser.SetFactTermContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>booleanSetTerm</c>
	/// labeled alternative in <see cref="ExpressionsParser.set_term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBooleanSetTerm([NotNull] ExpressionsParser.BooleanSetTermContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>stringSetTerm</c>
	/// labeled alternative in <see cref="ExpressionsParser.set_term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStringSetTerm([NotNull] ExpressionsParser.StringSetTermContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>numberSetTerm</c>
	/// labeled alternative in <see cref="ExpressionsParser.set_term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNumberSetTerm([NotNull] ExpressionsParser.NumberSetTermContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>bytesSetTerm</c>
	/// labeled alternative in <see cref="ExpressionsParser.set_term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBytesSetTerm([NotNull] ExpressionsParser.BytesSetTermContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>dateSetTerm</c>
	/// labeled alternative in <see cref="ExpressionsParser.set_term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDateSetTerm([NotNull] ExpressionsParser.DateSetTermContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="ExpressionsParser.set"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSet([NotNull] ExpressionsParser.SetContext context);
}
