//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Datalog.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="DatalogParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public interface IDatalogListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="DatalogParser.origin_clause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOrigin_clause([NotNull] DatalogParser.Origin_clauseContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="DatalogParser.origin_clause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOrigin_clause([NotNull] DatalogParser.Origin_clauseContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>originElementAuthority</c>
	/// labeled alternative in <see cref="DatalogParser.origin_element"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOriginElementAuthority([NotNull] DatalogParser.OriginElementAuthorityContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>originElementAuthority</c>
	/// labeled alternative in <see cref="DatalogParser.origin_element"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOriginElementAuthority([NotNull] DatalogParser.OriginElementAuthorityContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>originElementPrevious</c>
	/// labeled alternative in <see cref="DatalogParser.origin_element"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOriginElementPrevious([NotNull] DatalogParser.OriginElementPreviousContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>originElementPrevious</c>
	/// labeled alternative in <see cref="DatalogParser.origin_element"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOriginElementPrevious([NotNull] DatalogParser.OriginElementPreviousContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>originElementPublicKey</c>
	/// labeled alternative in <see cref="DatalogParser.origin_element"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterOriginElementPublicKey([NotNull] DatalogParser.OriginElementPublicKeyContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>originElementPublicKey</c>
	/// labeled alternative in <see cref="DatalogParser.origin_element"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitOriginElementPublicKey([NotNull] DatalogParser.OriginElementPublicKeyContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="DatalogParser.signature_alg"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSignature_alg([NotNull] DatalogParser.Signature_algContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="DatalogParser.signature_alg"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSignature_alg([NotNull] DatalogParser.Signature_algContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="DatalogParser.authorizer"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAuthorizer([NotNull] DatalogParser.AuthorizerContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="DatalogParser.authorizer"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAuthorizer([NotNull] DatalogParser.AuthorizerContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="DatalogParser.authorizer_element"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAuthorizer_element([NotNull] DatalogParser.Authorizer_elementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="DatalogParser.authorizer_element"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAuthorizer_element([NotNull] DatalogParser.Authorizer_elementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="DatalogParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBlock([NotNull] DatalogParser.BlockContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="DatalogParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBlock([NotNull] DatalogParser.BlockContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="DatalogParser.block_element"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBlock_element([NotNull] DatalogParser.Block_elementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="DatalogParser.block_element"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBlock_element([NotNull] DatalogParser.Block_elementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="DatalogParser.fact"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFact([NotNull] DatalogParser.FactContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="DatalogParser.fact"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFact([NotNull] DatalogParser.FactContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="DatalogParser.rule_"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRule_([NotNull] DatalogParser.Rule_Context context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="DatalogParser.rule_"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRule_([NotNull] DatalogParser.Rule_Context context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="DatalogParser.check"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterCheck([NotNull] DatalogParser.CheckContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="DatalogParser.check"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitCheck([NotNull] DatalogParser.CheckContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="DatalogParser.policy"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPolicy([NotNull] DatalogParser.PolicyContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="DatalogParser.policy"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPolicy([NotNull] DatalogParser.PolicyContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="DatalogParser.rule_body"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRule_body([NotNull] DatalogParser.Rule_bodyContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="DatalogParser.rule_body"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRule_body([NotNull] DatalogParser.Rule_bodyContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="DatalogParser.rule_body_element"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterRule_body_element([NotNull] DatalogParser.Rule_body_elementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="DatalogParser.rule_body_element"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitRule_body_element([NotNull] DatalogParser.Rule_body_elementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="DatalogParser.predicate"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPredicate([NotNull] DatalogParser.PredicateContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="DatalogParser.predicate"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPredicate([NotNull] DatalogParser.PredicateContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>expressionAdd</c>
	/// labeled alternative in <see cref="DatalogParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpressionAdd([NotNull] DatalogParser.ExpressionAddContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>expressionAdd</c>
	/// labeled alternative in <see cref="DatalogParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpressionAdd([NotNull] DatalogParser.ExpressionAddContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>expressionLogic</c>
	/// labeled alternative in <see cref="DatalogParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpressionLogic([NotNull] DatalogParser.ExpressionLogicContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>expressionLogic</c>
	/// labeled alternative in <see cref="DatalogParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpressionLogic([NotNull] DatalogParser.ExpressionLogicContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>expressionUnary</c>
	/// labeled alternative in <see cref="DatalogParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpressionUnary([NotNull] DatalogParser.ExpressionUnaryContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>expressionUnary</c>
	/// labeled alternative in <see cref="DatalogParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpressionUnary([NotNull] DatalogParser.ExpressionUnaryContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>expressionParentheses</c>
	/// labeled alternative in <see cref="DatalogParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpressionParentheses([NotNull] DatalogParser.ExpressionParenthesesContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>expressionParentheses</c>
	/// labeled alternative in <see cref="DatalogParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpressionParentheses([NotNull] DatalogParser.ExpressionParenthesesContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>expressionComp</c>
	/// labeled alternative in <see cref="DatalogParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpressionComp([NotNull] DatalogParser.ExpressionCompContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>expressionComp</c>
	/// labeled alternative in <see cref="DatalogParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpressionComp([NotNull] DatalogParser.ExpressionCompContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>expressionMethod</c>
	/// labeled alternative in <see cref="DatalogParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpressionMethod([NotNull] DatalogParser.ExpressionMethodContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>expressionMethod</c>
	/// labeled alternative in <see cref="DatalogParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpressionMethod([NotNull] DatalogParser.ExpressionMethodContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>expressionTerm</c>
	/// labeled alternative in <see cref="DatalogParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpressionTerm([NotNull] DatalogParser.ExpressionTermContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>expressionTerm</c>
	/// labeled alternative in <see cref="DatalogParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpressionTerm([NotNull] DatalogParser.ExpressionTermContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>expressionMult</c>
	/// labeled alternative in <see cref="DatalogParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpressionMult([NotNull] DatalogParser.ExpressionMultContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>expressionMult</c>
	/// labeled alternative in <see cref="DatalogParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpressionMult([NotNull] DatalogParser.ExpressionMultContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>expressionVariable</c>
	/// labeled alternative in <see cref="DatalogParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterExpressionVariable([NotNull] DatalogParser.ExpressionVariableContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>expressionVariable</c>
	/// labeled alternative in <see cref="DatalogParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitExpressionVariable([NotNull] DatalogParser.ExpressionVariableContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="DatalogParser.term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterTerm([NotNull] DatalogParser.TermContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="DatalogParser.term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitTerm([NotNull] DatalogParser.TermContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>setTerm</c>
	/// labeled alternative in <see cref="DatalogParser.fact_term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSetTerm([NotNull] DatalogParser.SetTermContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>setTerm</c>
	/// labeled alternative in <see cref="DatalogParser.fact_term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSetTerm([NotNull] DatalogParser.SetTermContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>setFactTerm</c>
	/// labeled alternative in <see cref="DatalogParser.fact_term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSetFactTerm([NotNull] DatalogParser.SetFactTermContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>setFactTerm</c>
	/// labeled alternative in <see cref="DatalogParser.fact_term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSetFactTerm([NotNull] DatalogParser.SetFactTermContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>booleanFactTerm</c>
	/// labeled alternative in <see cref="DatalogParser.set_term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBooleanFactTerm([NotNull] DatalogParser.BooleanFactTermContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>booleanFactTerm</c>
	/// labeled alternative in <see cref="DatalogParser.set_term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBooleanFactTerm([NotNull] DatalogParser.BooleanFactTermContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>stringFactTerm</c>
	/// labeled alternative in <see cref="DatalogParser.set_term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStringFactTerm([NotNull] DatalogParser.StringFactTermContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>stringFactTerm</c>
	/// labeled alternative in <see cref="DatalogParser.set_term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStringFactTerm([NotNull] DatalogParser.StringFactTermContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>numberFactTerm</c>
	/// labeled alternative in <see cref="DatalogParser.set_term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNumberFactTerm([NotNull] DatalogParser.NumberFactTermContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>numberFactTerm</c>
	/// labeled alternative in <see cref="DatalogParser.set_term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNumberFactTerm([NotNull] DatalogParser.NumberFactTermContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>bytesFactTerm</c>
	/// labeled alternative in <see cref="DatalogParser.set_term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterBytesFactTerm([NotNull] DatalogParser.BytesFactTermContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>bytesFactTerm</c>
	/// labeled alternative in <see cref="DatalogParser.set_term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitBytesFactTerm([NotNull] DatalogParser.BytesFactTermContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>dateFactTerm</c>
	/// labeled alternative in <see cref="DatalogParser.set_term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDateFactTerm([NotNull] DatalogParser.DateFactTermContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>dateFactTerm</c>
	/// labeled alternative in <see cref="DatalogParser.set_term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDateFactTerm([NotNull] DatalogParser.DateFactTermContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="DatalogParser.set"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSet([NotNull] DatalogParser.SetContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="DatalogParser.set"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSet([NotNull] DatalogParser.SetContext context);
}
