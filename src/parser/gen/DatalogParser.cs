//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Datalog.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class DatalogParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, VARIABLE=30, STRING=31, 
		NUMBER=32, BYTES=33, PUBLICKEYBYTES=34, BOOLEAN=35, DATE=36, METHOD_INVOCATION=37, 
		NAME=38, SINGLE_LINE_COMMENT=39, DELIMITED_COMMENT=40, WS=41;
	public const int
		RULE_origin_clause = 0, RULE_origin_element = 1, RULE_signature_alg = 2, 
		RULE_authorizer = 3, RULE_authorizer_element = 4, RULE_block = 5, RULE_block_element = 6, 
		RULE_fact = 7, RULE_rule_ = 8, RULE_check = 9, RULE_policy = 10, RULE_rule_body = 11, 
		RULE_rule_body_element = 12, RULE_predicate = 13, RULE_expression = 14, 
		RULE_term = 15, RULE_fact_term = 16, RULE_set_term = 17, RULE_set = 18;
	public static readonly string[] ruleNames = {
		"origin_clause", "origin_element", "signature_alg", "authorizer", "authorizer_element", 
		"block", "block_element", "fact", "rule_", "check", "policy", "rule_body", 
		"rule_body_element", "predicate", "expression", "term", "fact_term", "set_term", 
		"set"
	};

	private static readonly string[] _LiteralNames = {
		null, "'trusting'", "','", "'authority'", "'previous'", "'ed25519'", "';'", 
		"'('", "')'", "'<-'", "'check'", "'if'", "'all'", "'or'", "'allow'", "'deny'", 
		"'!'", "'*'", "'/'", "'+'", "'-'", "'||'", "'&&'", "'>='", "'<='", "'>'", 
		"'<'", "'=='", "'['", "']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, "VARIABLE", "STRING", "NUMBER", "BYTES", 
		"PUBLICKEYBYTES", "BOOLEAN", "DATE", "METHOD_INVOCATION", "NAME", "SINGLE_LINE_COMMENT", 
		"DELIMITED_COMMENT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Datalog.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static DatalogParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public DatalogParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public DatalogParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Origin_clauseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Origin_elementContext[] origin_element() {
			return GetRuleContexts<Origin_elementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Origin_elementContext origin_element(int i) {
			return GetRuleContext<Origin_elementContext>(i);
		}
		public Origin_clauseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_origin_clause; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDatalogListener typedListener = listener as IDatalogListener;
			if (typedListener != null) typedListener.EnterOrigin_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDatalogListener typedListener = listener as IDatalogListener;
			if (typedListener != null) typedListener.ExitOrigin_clause(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDatalogVisitor<TResult> typedVisitor = visitor as IDatalogVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOrigin_clause(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Origin_clauseContext origin_clause() {
		Origin_clauseContext _localctx = new Origin_clauseContext(Context, State);
		EnterRule(_localctx, 0, RULE_origin_clause);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 38;
			Match(T__0);
			State = 39;
			origin_element();
			State = 44;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1) {
				{
				{
				State = 40;
				Match(T__1);
				State = 41;
				origin_element();
				}
				}
				State = 46;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Origin_elementContext : ParserRuleContext {
		public Origin_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_origin_element; } }
	 
		public Origin_elementContext() { }
		public virtual void CopyFrom(Origin_elementContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class OriginElementAuthorityContext : Origin_elementContext {
		public OriginElementAuthorityContext(Origin_elementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDatalogListener typedListener = listener as IDatalogListener;
			if (typedListener != null) typedListener.EnterOriginElementAuthority(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDatalogListener typedListener = listener as IDatalogListener;
			if (typedListener != null) typedListener.ExitOriginElementAuthority(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDatalogVisitor<TResult> typedVisitor = visitor as IDatalogVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOriginElementAuthority(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OriginElementPublicKeyContext : Origin_elementContext {
		[System.Diagnostics.DebuggerNonUserCode] public Signature_algContext signature_alg() {
			return GetRuleContext<Signature_algContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PUBLICKEYBYTES() { return GetToken(DatalogParser.PUBLICKEYBYTES, 0); }
		public OriginElementPublicKeyContext(Origin_elementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDatalogListener typedListener = listener as IDatalogListener;
			if (typedListener != null) typedListener.EnterOriginElementPublicKey(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDatalogListener typedListener = listener as IDatalogListener;
			if (typedListener != null) typedListener.ExitOriginElementPublicKey(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDatalogVisitor<TResult> typedVisitor = visitor as IDatalogVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOriginElementPublicKey(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class OriginElementPreviousContext : Origin_elementContext {
		public OriginElementPreviousContext(Origin_elementContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDatalogListener typedListener = listener as IDatalogListener;
			if (typedListener != null) typedListener.EnterOriginElementPrevious(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDatalogListener typedListener = listener as IDatalogListener;
			if (typedListener != null) typedListener.ExitOriginElementPrevious(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDatalogVisitor<TResult> typedVisitor = visitor as IDatalogVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOriginElementPrevious(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Origin_elementContext origin_element() {
		Origin_elementContext _localctx = new Origin_elementContext(Context, State);
		EnterRule(_localctx, 2, RULE_origin_element);
		try {
			State = 52;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__2:
				_localctx = new OriginElementAuthorityContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 47;
				Match(T__2);
				}
				break;
			case T__3:
				_localctx = new OriginElementPreviousContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 48;
				Match(T__3);
				}
				break;
			case T__4:
				_localctx = new OriginElementPublicKeyContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 49;
				signature_alg();
				State = 50;
				Match(PUBLICKEYBYTES);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Signature_algContext : ParserRuleContext {
		public Signature_algContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signature_alg; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDatalogListener typedListener = listener as IDatalogListener;
			if (typedListener != null) typedListener.EnterSignature_alg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDatalogListener typedListener = listener as IDatalogListener;
			if (typedListener != null) typedListener.ExitSignature_alg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDatalogVisitor<TResult> typedVisitor = visitor as IDatalogVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSignature_alg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Signature_algContext signature_alg() {
		Signature_algContext _localctx = new Signature_algContext(Context, State);
		EnterRule(_localctx, 4, RULE_signature_alg);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 54;
			Match(T__4);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AuthorizerContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Authorizer_elementContext[] authorizer_element() {
			return GetRuleContexts<Authorizer_elementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Authorizer_elementContext authorizer_element(int i) {
			return GetRuleContext<Authorizer_elementContext>(i);
		}
		public AuthorizerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_authorizer; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDatalogListener typedListener = listener as IDatalogListener;
			if (typedListener != null) typedListener.EnterAuthorizer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDatalogListener typedListener = listener as IDatalogListener;
			if (typedListener != null) typedListener.ExitAuthorizer(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDatalogVisitor<TResult> typedVisitor = visitor as IDatalogVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAuthorizer(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AuthorizerContext authorizer() {
		AuthorizerContext _localctx = new AuthorizerContext(Context, State);
		EnterRule(_localctx, 6, RULE_authorizer);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 59;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (((_la) & ~0x3f) == 0 && ((1L << _la) & 274877957120L) != 0) {
				{
				{
				State = 56;
				authorizer_element();
				}
				}
				State = 61;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Authorizer_elementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PolicyContext policy() {
			return GetRuleContext<PolicyContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CheckContext check() {
			return GetRuleContext<CheckContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FactContext fact() {
			return GetRuleContext<FactContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rule_Context rule_() {
			return GetRuleContext<Rule_Context>(0);
		}
		public Authorizer_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_authorizer_element; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDatalogListener typedListener = listener as IDatalogListener;
			if (typedListener != null) typedListener.EnterAuthorizer_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDatalogListener typedListener = listener as IDatalogListener;
			if (typedListener != null) typedListener.ExitAuthorizer_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDatalogVisitor<TResult> typedVisitor = visitor as IDatalogVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAuthorizer_element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Authorizer_elementContext authorizer_element() {
		Authorizer_elementContext _localctx = new Authorizer_elementContext(Context, State);
		EnterRule(_localctx, 8, RULE_authorizer_element);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 66;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				{
				State = 62;
				policy();
				}
				break;
			case 2:
				{
				State = 63;
				check();
				}
				break;
			case 3:
				{
				State = 64;
				fact();
				}
				break;
			case 4:
				{
				State = 65;
				rule_();
				}
				break;
			}
			State = 68;
			Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Block_elementContext[] block_element() {
			return GetRuleContexts<Block_elementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Block_elementContext block_element(int i) {
			return GetRuleContext<Block_elementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDatalogListener typedListener = listener as IDatalogListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDatalogListener typedListener = listener as IDatalogListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDatalogVisitor<TResult> typedVisitor = visitor as IDatalogVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 10, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 73;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__9 || _la==NAME) {
				{
				{
				State = 70;
				block_element();
				}
				}
				State = 75;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Block_elementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CheckContext check() {
			return GetRuleContext<CheckContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FactContext fact() {
			return GetRuleContext<FactContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rule_Context rule_() {
			return GetRuleContext<Rule_Context>(0);
		}
		public Block_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block_element; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDatalogListener typedListener = listener as IDatalogListener;
			if (typedListener != null) typedListener.EnterBlock_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDatalogListener typedListener = listener as IDatalogListener;
			if (typedListener != null) typedListener.ExitBlock_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDatalogVisitor<TResult> typedVisitor = visitor as IDatalogVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBlock_element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Block_elementContext block_element() {
		Block_elementContext _localctx = new Block_elementContext(Context, State);
		EnterRule(_localctx, 12, RULE_block_element);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				State = 76;
				check();
				}
				break;
			case 2:
				{
				State = 77;
				fact();
				}
				break;
			case 3:
				{
				State = 78;
				rule_();
				}
				break;
			}
			State = 81;
			Match(T__5);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(DatalogParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Fact_termContext[] fact_term() {
			return GetRuleContexts<Fact_termContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Fact_termContext fact_term(int i) {
			return GetRuleContext<Fact_termContext>(i);
		}
		public FactContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fact; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDatalogListener typedListener = listener as IDatalogListener;
			if (typedListener != null) typedListener.EnterFact(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDatalogListener typedListener = listener as IDatalogListener;
			if (typedListener != null) typedListener.ExitFact(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDatalogVisitor<TResult> typedVisitor = visitor as IDatalogVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFact(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FactContext fact() {
		FactContext _localctx = new FactContext(Context, State);
		EnterRule(_localctx, 14, RULE_fact);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 83;
			Match(NAME);
			State = 84;
			Match(T__6);
			State = 85;
			fact_term();
			State = 90;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1) {
				{
				{
				State = 86;
				Match(T__1);
				State = 87;
				fact_term();
				}
				}
				State = 92;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 93;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_Context : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rule_bodyContext rule_body() {
			return GetRuleContext<Rule_bodyContext>(0);
		}
		public Rule_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDatalogListener typedListener = listener as IDatalogListener;
			if (typedListener != null) typedListener.EnterRule_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDatalogListener typedListener = listener as IDatalogListener;
			if (typedListener != null) typedListener.ExitRule_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDatalogVisitor<TResult> typedVisitor = visitor as IDatalogVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRule_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rule_Context rule_() {
		Rule_Context _localctx = new Rule_Context(Context, State);
		EnterRule(_localctx, 16, RULE_rule_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 95;
			predicate();
			State = 96;
			Match(T__8);
			State = 97;
			rule_body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CheckContext : ParserRuleContext {
		public IToken kind;
		[System.Diagnostics.DebuggerNonUserCode] public Rule_bodyContext[] rule_body() {
			return GetRuleContexts<Rule_bodyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rule_bodyContext rule_body(int i) {
			return GetRuleContext<Rule_bodyContext>(i);
		}
		public CheckContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_check; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDatalogListener typedListener = listener as IDatalogListener;
			if (typedListener != null) typedListener.EnterCheck(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDatalogListener typedListener = listener as IDatalogListener;
			if (typedListener != null) typedListener.ExitCheck(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDatalogVisitor<TResult> typedVisitor = visitor as IDatalogVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCheck(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CheckContext check() {
		CheckContext _localctx = new CheckContext(Context, State);
		EnterRule(_localctx, 18, RULE_check);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99;
			Match(T__9);
			State = 100;
			_localctx.kind = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==T__10 || _la==T__11) ) {
				_localctx.kind = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 101;
			rule_body();
			State = 106;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__12) {
				{
				{
				State = 102;
				Match(T__12);
				State = 103;
				rule_body();
				}
				}
				State = 108;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PolicyContext : ParserRuleContext {
		public IToken kind;
		[System.Diagnostics.DebuggerNonUserCode] public Rule_bodyContext[] rule_body() {
			return GetRuleContexts<Rule_bodyContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rule_bodyContext rule_body(int i) {
			return GetRuleContext<Rule_bodyContext>(i);
		}
		public PolicyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_policy; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDatalogListener typedListener = listener as IDatalogListener;
			if (typedListener != null) typedListener.EnterPolicy(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDatalogListener typedListener = listener as IDatalogListener;
			if (typedListener != null) typedListener.ExitPolicy(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDatalogVisitor<TResult> typedVisitor = visitor as IDatalogVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPolicy(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PolicyContext policy() {
		PolicyContext _localctx = new PolicyContext(Context, State);
		EnterRule(_localctx, 20, RULE_policy);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109;
			_localctx.kind = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==T__13 || _la==T__14) ) {
				_localctx.kind = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 110;
			Match(T__10);
			State = 111;
			rule_body();
			State = 116;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__12) {
				{
				{
				State = 112;
				Match(T__12);
				State = 113;
				rule_body();
				}
				}
				State = 118;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_bodyContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Rule_body_elementContext[] rule_body_element() {
			return GetRuleContexts<Rule_body_elementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Rule_body_elementContext rule_body_element(int i) {
			return GetRuleContext<Rule_body_elementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Origin_clauseContext origin_clause() {
			return GetRuleContext<Origin_clauseContext>(0);
		}
		public Rule_bodyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_body; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDatalogListener typedListener = listener as IDatalogListener;
			if (typedListener != null) typedListener.EnterRule_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDatalogListener typedListener = listener as IDatalogListener;
			if (typedListener != null) typedListener.ExitRule_body(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDatalogVisitor<TResult> typedVisitor = visitor as IDatalogVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRule_body(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rule_bodyContext rule_body() {
		Rule_bodyContext _localctx = new Rule_bodyContext(Context, State);
		EnterRule(_localctx, 22, RULE_rule_body);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 119;
			rule_body_element();
			State = 124;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1) {
				{
				{
				State = 120;
				Match(T__1);
				State = 121;
				rule_body_element();
				}
				}
				State = 126;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 128;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__0) {
				{
				State = 127;
				origin_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Rule_body_elementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public PredicateContext predicate() {
			return GetRuleContext<PredicateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Rule_body_elementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule_body_element; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDatalogListener typedListener = listener as IDatalogListener;
			if (typedListener != null) typedListener.EnterRule_body_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDatalogListener typedListener = listener as IDatalogListener;
			if (typedListener != null) typedListener.ExitRule_body_element(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDatalogVisitor<TResult> typedVisitor = visitor as IDatalogVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRule_body_element(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Rule_body_elementContext rule_body_element() {
		Rule_body_elementContext _localctx = new Rule_body_elementContext(Context, State);
		EnterRule(_localctx, 24, RULE_rule_body_element);
		try {
			State = 132;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NAME:
				EnterOuterAlt(_localctx, 1);
				{
				State = 130;
				predicate();
				}
				break;
			case T__6:
			case T__15:
			case T__27:
			case VARIABLE:
			case STRING:
			case NUMBER:
			case BYTES:
			case BOOLEAN:
			case DATE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 131;
				expression(0);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PredicateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NAME() { return GetToken(DatalogParser.NAME, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		public PredicateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_predicate; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDatalogListener typedListener = listener as IDatalogListener;
			if (typedListener != null) typedListener.EnterPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDatalogListener typedListener = listener as IDatalogListener;
			if (typedListener != null) typedListener.ExitPredicate(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDatalogVisitor<TResult> typedVisitor = visitor as IDatalogVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPredicate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PredicateContext predicate() {
		PredicateContext _localctx = new PredicateContext(Context, State);
		EnterRule(_localctx, 26, RULE_predicate);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134;
			Match(NAME);
			State = 135;
			Match(T__6);
			State = 136;
			term();
			State = 141;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__1) {
				{
				{
				State = 137;
				Match(T__1);
				State = 138;
				term();
				}
				}
				State = 143;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 144;
			Match(T__7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ExpressionAddContext : ExpressionContext {
		public IToken add;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExpressionAddContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDatalogListener typedListener = listener as IDatalogListener;
			if (typedListener != null) typedListener.EnterExpressionAdd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDatalogListener typedListener = listener as IDatalogListener;
			if (typedListener != null) typedListener.ExitExpressionAdd(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDatalogVisitor<TResult> typedVisitor = visitor as IDatalogVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionAdd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionLogicContext : ExpressionContext {
		public IToken logic;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExpressionLogicContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDatalogListener typedListener = listener as IDatalogListener;
			if (typedListener != null) typedListener.EnterExpressionLogic(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDatalogListener typedListener = listener as IDatalogListener;
			if (typedListener != null) typedListener.ExitExpressionLogic(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDatalogVisitor<TResult> typedVisitor = visitor as IDatalogVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionLogic(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionUnaryContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionUnaryContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDatalogListener typedListener = listener as IDatalogListener;
			if (typedListener != null) typedListener.EnterExpressionUnary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDatalogListener typedListener = listener as IDatalogListener;
			if (typedListener != null) typedListener.ExitExpressionUnary(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDatalogVisitor<TResult> typedVisitor = visitor as IDatalogVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionUnary(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionParenthesesContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ExpressionParenthesesContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDatalogListener typedListener = listener as IDatalogListener;
			if (typedListener != null) typedListener.EnterExpressionParentheses(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDatalogListener typedListener = listener as IDatalogListener;
			if (typedListener != null) typedListener.ExitExpressionParentheses(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDatalogVisitor<TResult> typedVisitor = visitor as IDatalogVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionParentheses(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionCompContext : ExpressionContext {
		public IToken comp;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExpressionCompContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDatalogListener typedListener = listener as IDatalogListener;
			if (typedListener != null) typedListener.EnterExpressionComp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDatalogListener typedListener = listener as IDatalogListener;
			if (typedListener != null) typedListener.ExitExpressionComp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDatalogVisitor<TResult> typedVisitor = visitor as IDatalogVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionComp(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionMethodContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode METHOD_INVOCATION() { return GetToken(DatalogParser.METHOD_INVOCATION, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		public ExpressionMethodContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDatalogListener typedListener = listener as IDatalogListener;
			if (typedListener != null) typedListener.EnterExpressionMethod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDatalogListener typedListener = listener as IDatalogListener;
			if (typedListener != null) typedListener.ExitExpressionMethod(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDatalogVisitor<TResult> typedVisitor = visitor as IDatalogVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionMethod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionTermContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public Fact_termContext fact_term() {
			return GetRuleContext<Fact_termContext>(0);
		}
		public ExpressionTermContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDatalogListener typedListener = listener as IDatalogListener;
			if (typedListener != null) typedListener.EnterExpressionTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDatalogListener typedListener = listener as IDatalogListener;
			if (typedListener != null) typedListener.ExitExpressionTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDatalogVisitor<TResult> typedVisitor = visitor as IDatalogVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionMultContext : ExpressionContext {
		public IToken mult;
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ExpressionMultContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDatalogListener typedListener = listener as IDatalogListener;
			if (typedListener != null) typedListener.EnterExpressionMult(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDatalogListener typedListener = listener as IDatalogListener;
			if (typedListener != null) typedListener.ExitExpressionMult(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDatalogVisitor<TResult> typedVisitor = visitor as IDatalogVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionMult(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ExpressionVariableContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(DatalogParser.VARIABLE, 0); }
		public ExpressionVariableContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDatalogListener typedListener = listener as IDatalogListener;
			if (typedListener != null) typedListener.EnterExpressionVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDatalogListener typedListener = listener as IDatalogListener;
			if (typedListener != null) typedListener.ExitExpressionVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDatalogVisitor<TResult> typedVisitor = visitor as IDatalogVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpressionVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 28;
		EnterRecursionRule(_localctx, 28, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 155;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__15:
				{
				_localctx = new ExpressionUnaryContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 147;
				Match(T__15);
				State = 148;
				expression(9);
				}
				break;
			case T__6:
				{
				_localctx = new ExpressionParenthesesContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 149;
				Match(T__6);
				State = 150;
				expression(0);
				State = 151;
				Match(T__7);
				}
				break;
			case T__27:
			case STRING:
			case NUMBER:
			case BYTES:
			case BOOLEAN:
			case DATE:
				{
				_localctx = new ExpressionTermContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 153;
				fact_term();
				}
				break;
			case VARIABLE:
				{
				_localctx = new ExpressionVariableContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 154;
				Match(VARIABLE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 185;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 183;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,16,Context) ) {
					case 1:
						{
						_localctx = new ExpressionMultContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 157;
						if (!(Precpred(Context, 6))) throw new FailedPredicateException(this, "Precpred(Context, 6)");
						State = 158;
						((ExpressionMultContext)_localctx).mult = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__16 || _la==T__17) ) {
							((ExpressionMultContext)_localctx).mult = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 159;
						expression(7);
						}
						break;
					case 2:
						{
						_localctx = new ExpressionAddContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 160;
						if (!(Precpred(Context, 5))) throw new FailedPredicateException(this, "Precpred(Context, 5)");
						State = 161;
						((ExpressionAddContext)_localctx).add = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__18 || _la==T__19) ) {
							((ExpressionAddContext)_localctx).add = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 162;
						expression(6);
						}
						break;
					case 3:
						{
						_localctx = new ExpressionLogicContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 163;
						if (!(Precpred(Context, 4))) throw new FailedPredicateException(this, "Precpred(Context, 4)");
						State = 164;
						((ExpressionLogicContext)_localctx).logic = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(_la==T__20 || _la==T__21) ) {
							((ExpressionLogicContext)_localctx).logic = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 165;
						expression(5);
						}
						break;
					case 4:
						{
						_localctx = new ExpressionCompContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 166;
						if (!(Precpred(Context, 3))) throw new FailedPredicateException(this, "Precpred(Context, 3)");
						State = 167;
						((ExpressionCompContext)_localctx).comp = TokenStream.LT(1);
						_la = TokenStream.LA(1);
						if ( !(((_la) & ~0x3f) == 0 && ((1L << _la) & 260046848L) != 0) ) {
							((ExpressionCompContext)_localctx).comp = ErrorHandler.RecoverInline(this);
						}
						else {
							ErrorHandler.ReportMatch(this);
						    Consume();
						}
						State = 168;
						expression(4);
						}
						break;
					case 5:
						{
						_localctx = new ExpressionMethodContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 169;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 170;
						Match(METHOD_INVOCATION);
						State = 171;
						Match(T__6);
						State = 180;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
						if (((_la) & ~0x3f) == 0 && ((1L << _la) & 119453777920L) != 0) {
							{
							State = 172;
							term();
							State = 177;
							ErrorHandler.Sync(this);
							_la = TokenStream.LA(1);
							while (_la==T__1) {
								{
								{
								State = 173;
								Match(T__1);
								State = 174;
								term();
								}
								}
								State = 179;
								ErrorHandler.Sync(this);
								_la = TokenStream.LA(1);
							}
							}
						}

						State = 182;
						Match(T__7);
						}
						break;
					}
					} 
				}
				State = 187;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,17,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Fact_termContext fact_term() {
			return GetRuleContext<Fact_termContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VARIABLE() { return GetToken(DatalogParser.VARIABLE, 0); }
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDatalogListener typedListener = listener as IDatalogListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDatalogListener typedListener = listener as IDatalogListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDatalogVisitor<TResult> typedVisitor = visitor as IDatalogVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 30, RULE_term);
		try {
			State = 190;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__27:
			case STRING:
			case NUMBER:
			case BYTES:
			case BOOLEAN:
			case DATE:
				EnterOuterAlt(_localctx, 1);
				{
				State = 188;
				fact_term();
				}
				break;
			case VARIABLE:
				EnterOuterAlt(_localctx, 2);
				{
				State = 189;
				Match(VARIABLE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Fact_termContext : ParserRuleContext {
		public Fact_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_fact_term; } }
	 
		public Fact_termContext() { }
		public virtual void CopyFrom(Fact_termContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SetFactTermContext : Fact_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public SetContext set() {
			return GetRuleContext<SetContext>(0);
		}
		public SetFactTermContext(Fact_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDatalogListener typedListener = listener as IDatalogListener;
			if (typedListener != null) typedListener.EnterSetFactTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDatalogListener typedListener = listener as IDatalogListener;
			if (typedListener != null) typedListener.ExitSetFactTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDatalogVisitor<TResult> typedVisitor = visitor as IDatalogVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetFactTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SetTermContext : Fact_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public Set_termContext set_term() {
			return GetRuleContext<Set_termContext>(0);
		}
		public SetTermContext(Fact_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDatalogListener typedListener = listener as IDatalogListener;
			if (typedListener != null) typedListener.EnterSetTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDatalogListener typedListener = listener as IDatalogListener;
			if (typedListener != null) typedListener.ExitSetTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDatalogVisitor<TResult> typedVisitor = visitor as IDatalogVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Fact_termContext fact_term() {
		Fact_termContext _localctx = new Fact_termContext(Context, State);
		EnterRule(_localctx, 32, RULE_fact_term);
		try {
			State = 194;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
			case NUMBER:
			case BYTES:
			case BOOLEAN:
			case DATE:
				_localctx = new SetTermContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 192;
				set_term();
				}
				break;
			case T__27:
				_localctx = new SetFactTermContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 193;
				set();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Set_termContext : ParserRuleContext {
		public Set_termContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set_term; } }
	 
		public Set_termContext() { }
		public virtual void CopyFrom(Set_termContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class StringFactTermContext : Set_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(DatalogParser.STRING, 0); }
		public StringFactTermContext(Set_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDatalogListener typedListener = listener as IDatalogListener;
			if (typedListener != null) typedListener.EnterStringFactTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDatalogListener typedListener = listener as IDatalogListener;
			if (typedListener != null) typedListener.ExitStringFactTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDatalogVisitor<TResult> typedVisitor = visitor as IDatalogVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringFactTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BytesFactTermContext : Set_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BYTES() { return GetToken(DatalogParser.BYTES, 0); }
		public BytesFactTermContext(Set_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDatalogListener typedListener = listener as IDatalogListener;
			if (typedListener != null) typedListener.EnterBytesFactTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDatalogListener typedListener = listener as IDatalogListener;
			if (typedListener != null) typedListener.ExitBytesFactTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDatalogVisitor<TResult> typedVisitor = visitor as IDatalogVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBytesFactTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BooleanFactTermContext : Set_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOLEAN() { return GetToken(DatalogParser.BOOLEAN, 0); }
		public BooleanFactTermContext(Set_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDatalogListener typedListener = listener as IDatalogListener;
			if (typedListener != null) typedListener.EnterBooleanFactTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDatalogListener typedListener = listener as IDatalogListener;
			if (typedListener != null) typedListener.ExitBooleanFactTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDatalogVisitor<TResult> typedVisitor = visitor as IDatalogVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBooleanFactTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class DateFactTermContext : Set_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DATE() { return GetToken(DatalogParser.DATE, 0); }
		public DateFactTermContext(Set_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDatalogListener typedListener = listener as IDatalogListener;
			if (typedListener != null) typedListener.EnterDateFactTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDatalogListener typedListener = listener as IDatalogListener;
			if (typedListener != null) typedListener.ExitDateFactTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDatalogVisitor<TResult> typedVisitor = visitor as IDatalogVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDateFactTerm(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberFactTermContext : Set_termContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(DatalogParser.NUMBER, 0); }
		public NumberFactTermContext(Set_termContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDatalogListener typedListener = listener as IDatalogListener;
			if (typedListener != null) typedListener.EnterNumberFactTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDatalogListener typedListener = listener as IDatalogListener;
			if (typedListener != null) typedListener.ExitNumberFactTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDatalogVisitor<TResult> typedVisitor = visitor as IDatalogVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberFactTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Set_termContext set_term() {
		Set_termContext _localctx = new Set_termContext(Context, State);
		EnterRule(_localctx, 34, RULE_set_term);
		try {
			State = 201;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case BOOLEAN:
				_localctx = new BooleanFactTermContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 196;
				Match(BOOLEAN);
				}
				break;
			case STRING:
				_localctx = new StringFactTermContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 197;
				Match(STRING);
				}
				break;
			case NUMBER:
				_localctx = new NumberFactTermContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 198;
				Match(NUMBER);
				}
				break;
			case BYTES:
				_localctx = new BytesFactTermContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 199;
				Match(BYTES);
				}
				break;
			case DATE:
				_localctx = new DateFactTermContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 200;
				Match(DATE);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Fact_termContext fact_term() {
			return GetRuleContext<Fact_termContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Set_termContext[] set_term() {
			return GetRuleContexts<Set_termContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Set_termContext set_term(int i) {
			return GetRuleContext<Set_termContext>(i);
		}
		public SetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IDatalogListener typedListener = listener as IDatalogListener;
			if (typedListener != null) typedListener.EnterSet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IDatalogListener typedListener = listener as IDatalogListener;
			if (typedListener != null) typedListener.ExitSet(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IDatalogVisitor<TResult> typedVisitor = visitor as IDatalogVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSet(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetContext set() {
		SetContext _localctx = new SetContext(Context, State);
		EnterRule(_localctx, 36, RULE_set);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 203;
			Match(T__27);
			State = 212;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (((_la) & ~0x3f) == 0 && ((1L << _la) & 118380036096L) != 0) {
				{
				State = 204;
				fact_term();
				State = 209;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__1) {
					{
					{
					State = 205;
					Match(T__1);
					State = 206;
					set_term();
					}
					}
					State = 211;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 214;
			Match(T__28);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 14: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 6);
		case 1: return Precpred(Context, 5);
		case 2: return Precpred(Context, 4);
		case 3: return Precpred(Context, 3);
		case 4: return Precpred(Context, 7);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,41,217,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,1,0,1,0,1,0,1,0,5,0,43,8,0,10,
		0,12,0,46,9,0,1,1,1,1,1,1,1,1,1,1,3,1,53,8,1,1,2,1,2,1,3,5,3,58,8,3,10,
		3,12,3,61,9,3,1,4,1,4,1,4,1,4,3,4,67,8,4,1,4,1,4,1,5,5,5,72,8,5,10,5,12,
		5,75,9,5,1,6,1,6,1,6,3,6,80,8,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,5,7,89,8,7,
		10,7,12,7,92,9,7,1,7,1,7,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,5,9,105,8,
		9,10,9,12,9,108,9,9,1,10,1,10,1,10,1,10,1,10,5,10,115,8,10,10,10,12,10,
		118,9,10,1,11,1,11,1,11,5,11,123,8,11,10,11,12,11,126,9,11,1,11,3,11,129,
		8,11,1,12,1,12,3,12,133,8,12,1,13,1,13,1,13,1,13,1,13,5,13,140,8,13,10,
		13,12,13,143,9,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,
		14,3,14,156,8,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
		1,14,1,14,1,14,1,14,1,14,1,14,1,14,5,14,176,8,14,10,14,12,14,179,9,14,
		3,14,181,8,14,1,14,5,14,184,8,14,10,14,12,14,187,9,14,1,15,1,15,3,15,191,
		8,15,1,16,1,16,3,16,195,8,16,1,17,1,17,1,17,1,17,1,17,3,17,202,8,17,1,
		18,1,18,1,18,1,18,5,18,208,8,18,10,18,12,18,211,9,18,3,18,213,8,18,1,18,
		1,18,1,18,0,1,28,19,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,
		0,6,1,0,11,12,1,0,14,15,1,0,17,18,1,0,19,20,1,0,21,22,1,0,23,27,232,0,
		38,1,0,0,0,2,52,1,0,0,0,4,54,1,0,0,0,6,59,1,0,0,0,8,66,1,0,0,0,10,73,1,
		0,0,0,12,79,1,0,0,0,14,83,1,0,0,0,16,95,1,0,0,0,18,99,1,0,0,0,20,109,1,
		0,0,0,22,119,1,0,0,0,24,132,1,0,0,0,26,134,1,0,0,0,28,155,1,0,0,0,30,190,
		1,0,0,0,32,194,1,0,0,0,34,201,1,0,0,0,36,203,1,0,0,0,38,39,5,1,0,0,39,
		44,3,2,1,0,40,41,5,2,0,0,41,43,3,2,1,0,42,40,1,0,0,0,43,46,1,0,0,0,44,
		42,1,0,0,0,44,45,1,0,0,0,45,1,1,0,0,0,46,44,1,0,0,0,47,53,5,3,0,0,48,53,
		5,4,0,0,49,50,3,4,2,0,50,51,5,34,0,0,51,53,1,0,0,0,52,47,1,0,0,0,52,48,
		1,0,0,0,52,49,1,0,0,0,53,3,1,0,0,0,54,55,5,5,0,0,55,5,1,0,0,0,56,58,3,
		8,4,0,57,56,1,0,0,0,58,61,1,0,0,0,59,57,1,0,0,0,59,60,1,0,0,0,60,7,1,0,
		0,0,61,59,1,0,0,0,62,67,3,20,10,0,63,67,3,18,9,0,64,67,3,14,7,0,65,67,
		3,16,8,0,66,62,1,0,0,0,66,63,1,0,0,0,66,64,1,0,0,0,66,65,1,0,0,0,67,68,
		1,0,0,0,68,69,5,6,0,0,69,9,1,0,0,0,70,72,3,12,6,0,71,70,1,0,0,0,72,75,
		1,0,0,0,73,71,1,0,0,0,73,74,1,0,0,0,74,11,1,0,0,0,75,73,1,0,0,0,76,80,
		3,18,9,0,77,80,3,14,7,0,78,80,3,16,8,0,79,76,1,0,0,0,79,77,1,0,0,0,79,
		78,1,0,0,0,80,81,1,0,0,0,81,82,5,6,0,0,82,13,1,0,0,0,83,84,5,38,0,0,84,
		85,5,7,0,0,85,90,3,32,16,0,86,87,5,2,0,0,87,89,3,32,16,0,88,86,1,0,0,0,
		89,92,1,0,0,0,90,88,1,0,0,0,90,91,1,0,0,0,91,93,1,0,0,0,92,90,1,0,0,0,
		93,94,5,8,0,0,94,15,1,0,0,0,95,96,3,26,13,0,96,97,5,9,0,0,97,98,3,22,11,
		0,98,17,1,0,0,0,99,100,5,10,0,0,100,101,7,0,0,0,101,106,3,22,11,0,102,
		103,5,13,0,0,103,105,3,22,11,0,104,102,1,0,0,0,105,108,1,0,0,0,106,104,
		1,0,0,0,106,107,1,0,0,0,107,19,1,0,0,0,108,106,1,0,0,0,109,110,7,1,0,0,
		110,111,5,11,0,0,111,116,3,22,11,0,112,113,5,13,0,0,113,115,3,22,11,0,
		114,112,1,0,0,0,115,118,1,0,0,0,116,114,1,0,0,0,116,117,1,0,0,0,117,21,
		1,0,0,0,118,116,1,0,0,0,119,124,3,24,12,0,120,121,5,2,0,0,121,123,3,24,
		12,0,122,120,1,0,0,0,123,126,1,0,0,0,124,122,1,0,0,0,124,125,1,0,0,0,125,
		128,1,0,0,0,126,124,1,0,0,0,127,129,3,0,0,0,128,127,1,0,0,0,128,129,1,
		0,0,0,129,23,1,0,0,0,130,133,3,26,13,0,131,133,3,28,14,0,132,130,1,0,0,
		0,132,131,1,0,0,0,133,25,1,0,0,0,134,135,5,38,0,0,135,136,5,7,0,0,136,
		141,3,30,15,0,137,138,5,2,0,0,138,140,3,30,15,0,139,137,1,0,0,0,140,143,
		1,0,0,0,141,139,1,0,0,0,141,142,1,0,0,0,142,144,1,0,0,0,143,141,1,0,0,
		0,144,145,5,8,0,0,145,27,1,0,0,0,146,147,6,14,-1,0,147,148,5,16,0,0,148,
		156,3,28,14,9,149,150,5,7,0,0,150,151,3,28,14,0,151,152,5,8,0,0,152,156,
		1,0,0,0,153,156,3,32,16,0,154,156,5,30,0,0,155,146,1,0,0,0,155,149,1,0,
		0,0,155,153,1,0,0,0,155,154,1,0,0,0,156,185,1,0,0,0,157,158,10,6,0,0,158,
		159,7,2,0,0,159,184,3,28,14,7,160,161,10,5,0,0,161,162,7,3,0,0,162,184,
		3,28,14,6,163,164,10,4,0,0,164,165,7,4,0,0,165,184,3,28,14,5,166,167,10,
		3,0,0,167,168,7,5,0,0,168,184,3,28,14,4,169,170,10,7,0,0,170,171,5,37,
		0,0,171,180,5,7,0,0,172,177,3,30,15,0,173,174,5,2,0,0,174,176,3,30,15,
		0,175,173,1,0,0,0,176,179,1,0,0,0,177,175,1,0,0,0,177,178,1,0,0,0,178,
		181,1,0,0,0,179,177,1,0,0,0,180,172,1,0,0,0,180,181,1,0,0,0,181,182,1,
		0,0,0,182,184,5,8,0,0,183,157,1,0,0,0,183,160,1,0,0,0,183,163,1,0,0,0,
		183,166,1,0,0,0,183,169,1,0,0,0,184,187,1,0,0,0,185,183,1,0,0,0,185,186,
		1,0,0,0,186,29,1,0,0,0,187,185,1,0,0,0,188,191,3,32,16,0,189,191,5,30,
		0,0,190,188,1,0,0,0,190,189,1,0,0,0,191,31,1,0,0,0,192,195,3,34,17,0,193,
		195,3,36,18,0,194,192,1,0,0,0,194,193,1,0,0,0,195,33,1,0,0,0,196,202,5,
		35,0,0,197,202,5,31,0,0,198,202,5,32,0,0,199,202,5,33,0,0,200,202,5,36,
		0,0,201,196,1,0,0,0,201,197,1,0,0,0,201,198,1,0,0,0,201,199,1,0,0,0,201,
		200,1,0,0,0,202,35,1,0,0,0,203,212,5,28,0,0,204,209,3,32,16,0,205,206,
		5,2,0,0,206,208,3,34,17,0,207,205,1,0,0,0,208,211,1,0,0,0,209,207,1,0,
		0,0,209,210,1,0,0,0,210,213,1,0,0,0,211,209,1,0,0,0,212,204,1,0,0,0,212,
		213,1,0,0,0,213,214,1,0,0,0,214,215,5,29,0,0,215,37,1,0,0,0,23,44,52,59,
		66,73,79,90,106,116,124,128,132,141,155,177,180,183,185,190,194,201,209,
		212
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
