//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Datalog.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete generic visitor for a parse tree produced
/// by <see cref="DatalogParser"/>.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public interface IDatalogVisitor<Result> : IParseTreeVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by <see cref="DatalogParser.origin_clause"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitOrigin_clause([NotNull] DatalogParser.Origin_clauseContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>originElementAuthority</c>
	/// labeled alternative in <see cref="DatalogParser.origin_element"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitOriginElementAuthority([NotNull] DatalogParser.OriginElementAuthorityContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>originElementPrevious</c>
	/// labeled alternative in <see cref="DatalogParser.origin_element"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitOriginElementPrevious([NotNull] DatalogParser.OriginElementPreviousContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>originElementPublicKey</c>
	/// labeled alternative in <see cref="DatalogParser.origin_element"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitOriginElementPublicKey([NotNull] DatalogParser.OriginElementPublicKeyContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="DatalogParser.signature_alg"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSignature_alg([NotNull] DatalogParser.Signature_algContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="DatalogParser.authorizer"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAuthorizer([NotNull] DatalogParser.AuthorizerContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="DatalogParser.authorizer_element"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAuthorizer_element([NotNull] DatalogParser.Authorizer_elementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="DatalogParser.block"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBlock([NotNull] DatalogParser.BlockContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="DatalogParser.block_element"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBlock_element([NotNull] DatalogParser.Block_elementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="DatalogParser.fact"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFact([NotNull] DatalogParser.FactContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="DatalogParser.rule_"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRule_([NotNull] DatalogParser.Rule_Context context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="DatalogParser.check"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCheck([NotNull] DatalogParser.CheckContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="DatalogParser.policy"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPolicy([NotNull] DatalogParser.PolicyContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="DatalogParser.rule_body"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRule_body([NotNull] DatalogParser.Rule_bodyContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="DatalogParser.rule_body_element"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRule_body_element([NotNull] DatalogParser.Rule_body_elementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="DatalogParser.predicate"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitPredicate([NotNull] DatalogParser.PredicateContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>expressionAdd</c>
	/// labeled alternative in <see cref="DatalogParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpressionAdd([NotNull] DatalogParser.ExpressionAddContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>expressionLogic</c>
	/// labeled alternative in <see cref="DatalogParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpressionLogic([NotNull] DatalogParser.ExpressionLogicContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>expressionUnary</c>
	/// labeled alternative in <see cref="DatalogParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpressionUnary([NotNull] DatalogParser.ExpressionUnaryContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>expressionParentheses</c>
	/// labeled alternative in <see cref="DatalogParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpressionParentheses([NotNull] DatalogParser.ExpressionParenthesesContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>expressionComp</c>
	/// labeled alternative in <see cref="DatalogParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpressionComp([NotNull] DatalogParser.ExpressionCompContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>expressionMethod</c>
	/// labeled alternative in <see cref="DatalogParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpressionMethod([NotNull] DatalogParser.ExpressionMethodContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>expressionTerm</c>
	/// labeled alternative in <see cref="DatalogParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpressionTerm([NotNull] DatalogParser.ExpressionTermContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>expressionMult</c>
	/// labeled alternative in <see cref="DatalogParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpressionMult([NotNull] DatalogParser.ExpressionMultContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>expressionVariable</c>
	/// labeled alternative in <see cref="DatalogParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitExpressionVariable([NotNull] DatalogParser.ExpressionVariableContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="DatalogParser.term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitTerm([NotNull] DatalogParser.TermContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>setTerm</c>
	/// labeled alternative in <see cref="DatalogParser.fact_term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSetTerm([NotNull] DatalogParser.SetTermContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>setFactTerm</c>
	/// labeled alternative in <see cref="DatalogParser.fact_term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSetFactTerm([NotNull] DatalogParser.SetFactTermContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>booleanFactTerm</c>
	/// labeled alternative in <see cref="DatalogParser.set_term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBooleanFactTerm([NotNull] DatalogParser.BooleanFactTermContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>stringFactTerm</c>
	/// labeled alternative in <see cref="DatalogParser.set_term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStringFactTerm([NotNull] DatalogParser.StringFactTermContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>numberFactTerm</c>
	/// labeled alternative in <see cref="DatalogParser.set_term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNumberFactTerm([NotNull] DatalogParser.NumberFactTermContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>bytesFactTerm</c>
	/// labeled alternative in <see cref="DatalogParser.set_term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBytesFactTerm([NotNull] DatalogParser.BytesFactTermContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>dateFactTerm</c>
	/// labeled alternative in <see cref="DatalogParser.set_term"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDateFactTerm([NotNull] DatalogParser.DateFactTermContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="DatalogParser.set"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSet([NotNull] DatalogParser.SetContext context);
}
