//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Expressions.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class ExpressionsLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, VARIABLE=29, STRING=30, NUMBER=31, 
		BYTES=32, PUBLICKEYBYTES=33, BOOLEAN=34, DATE=35, METHOD_INVOCATION=36, 
		NAME=37, WS=38;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", 
		"T__25", "T__26", "T__27", "VARIABLE", "STRING", "NUMBER", "BYTES", "PUBLICKEYBYTES", 
		"BOOLEAN", "DATE", "METHOD_INVOCATION", "NAME", "WS"
	};


	public ExpressionsLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public ExpressionsLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'trusting'", "','", "'authority'", "'previous'", "'ed25519'", "';'", 
		"'('", "')'", "'check'", "'if'", "'all'", "'or'", "'allow'", "'deny'", 
		"'!'", "'*'", "'/'", "'+'", "'-'", "'||'", "'&&'", "'>='", "'<='", "'>'", 
		"'<'", "'=='", "'['", "']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, "VARIABLE", "STRING", "NUMBER", "BYTES", 
		"PUBLICKEYBYTES", "BOOLEAN", "DATE", "METHOD_INVOCATION", "NAME", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Expressions.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static ExpressionsLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,38,286,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,
		2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
		1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,
		8,1,8,1,8,1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,12,1,12,
		1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,15,1,15,1,16,
		1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,
		1,22,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,27,1,27,
		1,28,1,28,4,28,184,8,28,11,28,12,28,185,1,29,1,29,1,29,1,29,5,29,192,8,
		29,10,29,12,29,195,9,29,1,29,1,29,1,30,3,30,200,8,30,1,30,4,30,203,8,30,
		11,30,12,30,204,1,31,1,31,1,31,1,31,1,31,1,31,4,31,213,8,31,11,31,12,31,
		214,1,32,1,32,4,32,219,8,32,11,32,12,32,220,1,33,1,33,1,33,1,33,1,33,1,
		33,1,33,1,33,1,33,3,33,232,8,33,1,34,5,34,235,8,34,10,34,12,34,238,9,34,
		1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,
		1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,3,34,262,8,34,1,35,1,35,3,35,266,
		8,35,1,35,5,35,269,8,35,10,35,12,35,272,9,35,1,36,1,36,4,36,276,8,36,11,
		36,12,36,277,1,37,4,37,281,8,37,11,37,12,37,282,1,37,1,37,1,193,0,38,1,
		1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,
		15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,
		27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,1,
		0,7,4,0,48,58,65,90,95,95,97,122,1,0,48,57,2,0,48,57,97,102,2,0,43,43,
		45,45,2,0,65,90,97,122,4,0,48,57,65,90,95,95,97,122,3,0,9,10,13,13,32,
		32,298,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,
		1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,
		0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,
		1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,
		0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,
		1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,
		0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,1,77,
		1,0,0,0,3,86,1,0,0,0,5,88,1,0,0,0,7,98,1,0,0,0,9,107,1,0,0,0,11,115,1,
		0,0,0,13,117,1,0,0,0,15,119,1,0,0,0,17,121,1,0,0,0,19,127,1,0,0,0,21,130,
		1,0,0,0,23,134,1,0,0,0,25,137,1,0,0,0,27,143,1,0,0,0,29,148,1,0,0,0,31,
		150,1,0,0,0,33,152,1,0,0,0,35,154,1,0,0,0,37,156,1,0,0,0,39,158,1,0,0,
		0,41,161,1,0,0,0,43,164,1,0,0,0,45,167,1,0,0,0,47,170,1,0,0,0,49,172,1,
		0,0,0,51,174,1,0,0,0,53,177,1,0,0,0,55,179,1,0,0,0,57,181,1,0,0,0,59,187,
		1,0,0,0,61,199,1,0,0,0,63,206,1,0,0,0,65,216,1,0,0,0,67,231,1,0,0,0,69,
		236,1,0,0,0,71,263,1,0,0,0,73,273,1,0,0,0,75,280,1,0,0,0,77,78,5,116,0,
		0,78,79,5,114,0,0,79,80,5,117,0,0,80,81,5,115,0,0,81,82,5,116,0,0,82,83,
		5,105,0,0,83,84,5,110,0,0,84,85,5,103,0,0,85,2,1,0,0,0,86,87,5,44,0,0,
		87,4,1,0,0,0,88,89,5,97,0,0,89,90,5,117,0,0,90,91,5,116,0,0,91,92,5,104,
		0,0,92,93,5,111,0,0,93,94,5,114,0,0,94,95,5,105,0,0,95,96,5,116,0,0,96,
		97,5,121,0,0,97,6,1,0,0,0,98,99,5,112,0,0,99,100,5,114,0,0,100,101,5,101,
		0,0,101,102,5,118,0,0,102,103,5,105,0,0,103,104,5,111,0,0,104,105,5,117,
		0,0,105,106,5,115,0,0,106,8,1,0,0,0,107,108,5,101,0,0,108,109,5,100,0,
		0,109,110,5,50,0,0,110,111,5,53,0,0,111,112,5,53,0,0,112,113,5,49,0,0,
		113,114,5,57,0,0,114,10,1,0,0,0,115,116,5,59,0,0,116,12,1,0,0,0,117,118,
		5,40,0,0,118,14,1,0,0,0,119,120,5,41,0,0,120,16,1,0,0,0,121,122,5,99,0,
		0,122,123,5,104,0,0,123,124,5,101,0,0,124,125,5,99,0,0,125,126,5,107,0,
		0,126,18,1,0,0,0,127,128,5,105,0,0,128,129,5,102,0,0,129,20,1,0,0,0,130,
		131,5,97,0,0,131,132,5,108,0,0,132,133,5,108,0,0,133,22,1,0,0,0,134,135,
		5,111,0,0,135,136,5,114,0,0,136,24,1,0,0,0,137,138,5,97,0,0,138,139,5,
		108,0,0,139,140,5,108,0,0,140,141,5,111,0,0,141,142,5,119,0,0,142,26,1,
		0,0,0,143,144,5,100,0,0,144,145,5,101,0,0,145,146,5,110,0,0,146,147,5,
		121,0,0,147,28,1,0,0,0,148,149,5,33,0,0,149,30,1,0,0,0,150,151,5,42,0,
		0,151,32,1,0,0,0,152,153,5,47,0,0,153,34,1,0,0,0,154,155,5,43,0,0,155,
		36,1,0,0,0,156,157,5,45,0,0,157,38,1,0,0,0,158,159,5,124,0,0,159,160,5,
		124,0,0,160,40,1,0,0,0,161,162,5,38,0,0,162,163,5,38,0,0,163,42,1,0,0,
		0,164,165,5,62,0,0,165,166,5,61,0,0,166,44,1,0,0,0,167,168,5,60,0,0,168,
		169,5,61,0,0,169,46,1,0,0,0,170,171,5,62,0,0,171,48,1,0,0,0,172,173,5,
		60,0,0,173,50,1,0,0,0,174,175,5,61,0,0,175,176,5,61,0,0,176,52,1,0,0,0,
		177,178,5,91,0,0,178,54,1,0,0,0,179,180,5,93,0,0,180,56,1,0,0,0,181,183,
		5,36,0,0,182,184,7,0,0,0,183,182,1,0,0,0,184,185,1,0,0,0,185,183,1,0,0,
		0,185,186,1,0,0,0,186,58,1,0,0,0,187,193,5,34,0,0,188,189,5,92,0,0,189,
		192,5,34,0,0,190,192,9,0,0,0,191,188,1,0,0,0,191,190,1,0,0,0,192,195,1,
		0,0,0,193,194,1,0,0,0,193,191,1,0,0,0,194,196,1,0,0,0,195,193,1,0,0,0,
		196,197,5,34,0,0,197,60,1,0,0,0,198,200,5,45,0,0,199,198,1,0,0,0,199,200,
		1,0,0,0,200,202,1,0,0,0,201,203,7,1,0,0,202,201,1,0,0,0,203,204,1,0,0,
		0,204,202,1,0,0,0,204,205,1,0,0,0,205,62,1,0,0,0,206,207,5,104,0,0,207,
		208,5,101,0,0,208,209,5,120,0,0,209,210,5,58,0,0,210,212,1,0,0,0,211,213,
		7,2,0,0,212,211,1,0,0,0,213,214,1,0,0,0,214,212,1,0,0,0,214,215,1,0,0,
		0,215,64,1,0,0,0,216,218,5,47,0,0,217,219,7,2,0,0,218,217,1,0,0,0,219,
		220,1,0,0,0,220,218,1,0,0,0,220,221,1,0,0,0,221,66,1,0,0,0,222,223,5,116,
		0,0,223,224,5,114,0,0,224,225,5,117,0,0,225,232,5,101,0,0,226,227,5,102,
		0,0,227,228,5,97,0,0,228,229,5,108,0,0,229,230,5,115,0,0,230,232,5,101,
		0,0,231,222,1,0,0,0,231,226,1,0,0,0,232,68,1,0,0,0,233,235,7,1,0,0,234,
		233,1,0,0,0,235,238,1,0,0,0,236,234,1,0,0,0,236,237,1,0,0,0,237,239,1,
		0,0,0,238,236,1,0,0,0,239,240,5,45,0,0,240,241,7,1,0,0,241,242,7,1,0,0,
		242,243,5,45,0,0,243,244,7,1,0,0,244,245,7,1,0,0,245,246,5,84,0,0,246,
		247,7,1,0,0,247,248,7,1,0,0,248,249,5,58,0,0,249,250,7,1,0,0,250,251,7,
		1,0,0,251,252,5,58,0,0,252,253,7,1,0,0,253,261,7,1,0,0,254,262,5,90,0,
		0,255,256,7,3,0,0,256,257,7,1,0,0,257,258,7,1,0,0,258,259,5,58,0,0,259,
		260,7,1,0,0,260,262,7,1,0,0,261,254,1,0,0,0,261,255,1,0,0,0,262,70,1,0,
		0,0,263,265,5,46,0,0,264,266,7,4,0,0,265,264,1,0,0,0,266,270,1,0,0,0,267,
		269,7,5,0,0,268,267,1,0,0,0,269,272,1,0,0,0,270,268,1,0,0,0,270,271,1,
		0,0,0,271,72,1,0,0,0,272,270,1,0,0,0,273,275,7,4,0,0,274,276,7,0,0,0,275,
		274,1,0,0,0,276,277,1,0,0,0,277,275,1,0,0,0,277,278,1,0,0,0,278,74,1,0,
		0,0,279,281,7,6,0,0,280,279,1,0,0,0,281,282,1,0,0,0,282,280,1,0,0,0,282,
		283,1,0,0,0,283,284,1,0,0,0,284,285,6,37,0,0,285,76,1,0,0,0,18,0,185,191,
		193,199,204,212,214,218,220,231,236,261,265,268,270,277,282,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
